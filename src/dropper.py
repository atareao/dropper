#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# splashscreen.py
#
# Copyright (C) 2012 Lorenzo Carbonell
# lorenzo.carbonell.cerezo@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#

from gi.repository import Gtk
from gi.repository import GObject
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from capturer import Capturer
import cairo
import time
import os
import math
import comun
import webbrowser
from comun import _

def add2menu(menu, text = None, icon = None, conector_event = None, conector_action = None):
	if text != None:
		menu_item = Gtk.ImageMenuItem.new_with_label(text)
		if icon:
			image = Gtk.Image.new_from_stock(icon, Gtk.IconSize.MENU)
			menu_item.set_image(image)
			menu_item.set_always_show_image(True)
	else:
		if icon == None:
			menu_item = Gtk.SeparatorMenuItem()
		else:
			menu_item = Gtk.ImageMenuItem.new_from_stock(icon, None)
			menu_item.set_always_show_image(True)
	if conector_event != None and conector_action != None:				
		menu_item.connect(conector_event,conector_action)
	menu_item.show()
	menu.append(menu_item)
	return menu_item

def get_pixel_colour(x,y):	
	colors = []
	w = Gdk.get_default_root_window()
	pixbuf = Gdk.pixbuf_get_from_window(w, x, y, 1, 1)	
	alist = pixbuf.get_pixels()
	if pixbuf.get_has_alpha():
		rows = 4
	else:
		rows = 3
	for cont in range(0,len(alist),rows):
		color=tuple(alist[cont:cont+rows])
		colors.append(color)
	if len(colors)>0:
		colors = colors[0]
	else:
		colors = None
	return colors	

def cmyk2cmy(c,m,y,k):
	c = c * (1. - k) + k
	m = m * (1. - k) + k
	y = y * (1. - k) + k
	return c,m,y

def cmyk2rgb(c,m,y,k):
	c = c * (1. - k) + k
	m = m * (1. - k) + k
	y = y * (1. - k) + k
	return int(( 1. - c ) * 255.), int(( 1. - m ) * 255.), int(( 1.- y ) * 255.)
	
def cmy2cmyk(c,m,y):
	k = min(c,m,y)
	if k == 1:
		c = 0.
		m = 0.
		y = 0.
	else:
		c = (c - k)/(1. - k)
		m = (m - k)/(1. - k)
		y = (y - k)/(1. - k)
	return c,m,y,k
def rgb2cmy(r,g,b):
	c = 1. - ( r / 255. )
	m = 1. - ( g / 255. )
	y = 1. - ( b / 255. )	
	return c,m,y
	
def cmy2rgb(c,m,y):
	return int(( 1. - c ) * 255.), int(( 1. - m ) * 255.), int(( 1.- y ) * 255.)

def hsv2rgb2(h, s, v):
	h = float(h)
	s = float(s)/255.
	v = float(v)/255.
	c = v * s
	x = c * 1. -abs((h/60.) % 2. - 1.)
	m = v -c
	if h < 60:
		rp,gp,bp = c,x,0
	elif h>=60 and h <120:
		rp,gp,bp = x,c,0
	elif h>=120 and h <180:
		rp,gp,bp = 0,c,x
	elif h>=180 and h <240:
		rp,gp,bp = 0,x,c
	elif h>=240 and h <300:
		rp,gp,bp = x,0,c
	elif h>=300 and h <=360:
		rp,gp,bp = c,0,x
	
	r = (rp+m)*255
	g = (gp+m)*255
	b = (bp+m)*255
	return r,g,b
	
def hsv2rgb(h, s, v):
    h = float(h)
    s = float(s)/255.
    v = float(v)/255.
    h60 = h / 60.0
    h60f = math.floor(h60)
    hi = int(h60f) % 6
    f = h60 - h60f
    p = v * (1 - s)
    q = v * (1 - f * s)
    t = v * (1 - (1 - f) * s)
    r, g, b = 0, 0, 0
    if hi == 0: r, g, b = v, t, p
    elif hi == 1: r, g, b = q, v, p
    elif hi == 2: r, g, b = p, v, t
    elif hi == 3: r, g, b = p, q, v
    elif hi == 4: r, g, b = t, p, v
    elif hi == 5: r, g, b = v, p, q
    r, g, b = int(r * 255), int(g * 255), int(b * 255)
    return r, g, b
    
def rgb2hsv(r, g, b):
    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = df/mx
    v = mx
    h,s,v = int(h),int(s*255),int(v*255)
    return h, s, v

def RGBToHTMLColor(rgb_tuple):
    """ convert an (R, G, B) tuple to #RRGGBB """
    hexcolor = '#%02x%02x%02x' % rgb_tuple
    # that's it! '%02x' means zero-padded, 2-digit hex values
    return hexcolor

def HTMLColorToRGB(colorstring):
    """ convert #RRGGBB to an (R, G, B) tuple """
    colorstring = colorstring.strip()
    if colorstring[0] == '#': colorstring = colorstring[1:]
    if len(colorstring) != 6:
        return None
    r, g, b = colorstring[:2], colorstring[2:4], colorstring[4:]
    r, g, b = [int(n, 16) for n in (r, g, b)]
    return (r, g, b)
    
class PixbufArea(Gtk.DrawingArea):
	def __init__(self):
		Gtk.DrawingArea.__init__(self)
		self.add_events(Gdk.EventMask.POINTER_MOTION_MASK | Gdk.EventMask.BUTTON_PRESS_MASK | Gdk.EventMask.BUTTON_RELEASE_MASK)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(200,200)
		self.pixbuf = None
		
	def set_pixbuf(self,pixbuf):
		self.pixbuf = pixbuf
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		if self.pixbuf is not None:
			Gdk.cairo_set_source_pixbuf(cr, self.pixbuf,0,0)
			cr.paint()

class GradientArea(Gtk.DrawingArea):
	def __init__(self,r,g,b,variable='r'):
		Gtk.DrawingArea.__init__(self)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(150,10)
		self.r = r
		self.g = g
		self.b = b
		self.variable = variable
	
	def set_rgb(self,r,g,b):
		self.r = r
		self.g = g
		self.b = b
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		width =  self.get_allocation().width
		height =  self.get_allocation().height
		xi = 0.
		yi = height/2.
		xf = width
		yf = height/2.
		if self.variable == 'r':
			ri,gi,bi = 0., self.g,self.b
			rf,gf,bf = 255., self.g,self.b
		elif self.variable == 'g':
			ri,gi,bi = self.r,0.,self.b
			rf,gf,bf = self.r,255.,self.b
		elif self.variable == 'b':
			ri,gi,bi = self.r,self.g,0.
			rf,gf,bf = self.r,self.g,255.			
		linear = cairo.LinearGradient(xi,yi,xf,yf)
		linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
		linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
		cr.set_source(linear)
		cr.paint()
class GradientAreaCMY(Gtk.DrawingArea):
	def __init__(self,c,m,y,variable='c'):
		Gtk.DrawingArea.__init__(self)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(150,10)
		self.c = c
		self.m = m
		self.y = y
		self.variable = variable
	
	def set_cmy(self,c,m,y):
		self.c = c
		self.m = m
		self.y = y
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		width =  self.get_allocation().width
		height =  self.get_allocation().height
		xi = 0.
		yi = height/2.
		xf = width
		yf = height/2.
		if self.variable == 'c':
			ri,gi,bi = cmy2rgb(0.,self.m,self.y)
			rf,gf,bf = cmy2rgb(1.,self.m,self.y)
		elif self.variable == 'm':
			ri,gi,bi = cmy2rgb(self.c,0.,self.y)
			rf,gf,bf = cmy2rgb(self.c,1.,self.y)
		elif self.variable == 'y':
			ri,gi,bi = cmy2rgb(self.c,self.m,0.)
			rf,gf,bf = cmy2rgb(self.y,self.m,1.)
		linear = cairo.LinearGradient(xi,yi,xf,yf)
		linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
		linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
		cr.set_source(linear)
		cr.paint()		
		
class GradientAreaCMYK(Gtk.DrawingArea):
	def __init__(self,c,m,y,k,variable='c'):
		Gtk.DrawingArea.__init__(self)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(150,10)
		self.c = c
		self.m = m
		self.y = y
		self.k = k
		self.variable = variable
	
	def set_cmyk(self,c,m,y,k):
		self.c = c
		self.m = m
		self.y = y
		self.k = k
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		width =  self.get_allocation().width
		height =  self.get_allocation().height
		xi = 0.
		yi = height/2.
		xf = width
		yf = height/2.
		if self.variable == 'c':
			ri,gi,bi = cmyk2rgb(0.,self.m,self.y,self.k)
			rf,gf,bf = cmyk2rgb(1.,self.m,self.y,self.k)
		elif self.variable == 'm':
			ri,gi,bi = cmyk2rgb(self.c,0.,self.y,self.k)
			rf,gf,bf = cmyk2rgb(self.c,1.,self.y,self.k)
		elif self.variable == 'y':
			ri,gi,bi = cmyk2rgb(self.c,self.m,0.,self.k)
			rf,gf,bf = cmyk2rgb(self.y,self.m,1.,self.k)
		elif self.variable == 'k':
			ri,gi,bi = cmyk2rgb(self.c,self.m,self.y,0.)
			rf,gf,bf = cmyk2rgb(self.y,self.m,self.y,1.)
		linear = cairo.LinearGradient(xi,yi,xf,yf)
		linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
		linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
		cr.set_source(linear)
		cr.paint()

class GradientAreaHSV(Gtk.DrawingArea):
	def __init__(self,h,s,v,variable='h'):
		Gtk.DrawingArea.__init__(self)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(150,10)
		self.h = h
		self.s = s
		self.v = v
		self.variable = variable
	
	def set_hsv(self,h,s,v):
		self.h = h
		self.s = s
		self.v = v
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		width =  self.get_allocation().width
		height =  self.get_allocation().height
		xi = 0.
		yi = height/2.
		xf = width
		yf = height/2.
		linear = cairo.LinearGradient(xi,yi,xf,yf)
		if self.variable == 'h':			
			r1,g1,b1 = hsv2rgb(0.,self.s,self.v)
			r2,g2,b2 = hsv2rgb(120.,self.s,self.v)
			r3,g3,b3 = hsv2rgb(240.,self.s,self.v)
			r4,g4,b4 = hsv2rgb(360.,self.s,self.v)
			linear.add_color_stop_rgb(0.,r1/255.,g1/255.,b1/255.)
			linear.add_color_stop_rgb(0.333333333333,r2/255.,g2/255.,b2/255.)
			linear.add_color_stop_rgb(0.666666666666,r3/255.,g3/255.,b3/255.)
			linear.add_color_stop_rgb(1.,r4/255.,g4/255.,b4/255.)
		elif self.variable == 's':
			ri,gi,bi = hsv2rgb(self.h,0.,self.v)
			rf,gf,bf = hsv2rgb(self.h,255.,self.v)
			linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
			linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
		elif self.variable == 'v':
			ri,gi,bi = hsv2rgb(self.h,self.s,0.)
			rf,gf,bf = hsv2rgb(self.h,self.s,255.)
			linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
			linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
		
		cr.set_source(linear)
		cr.paint()

class ColorArea(Gtk.DrawingArea):
	def __init__(self):
		Gtk.DrawingArea.__init__(self)
		self.connect('draw', self.on_expose, None)
		self.set_size_request(100,100)
		self.r = 0
		self.g = 0
		self.b = 0
		
	def set_rgb(self,r,g,b):
		self.r = r
		self.g = g
		self.b = b
		self.queue_draw()
		
	def on_expose(self, widget, cr, data):
		cr.set_source_rgb(self.r/255.,self.g/255.,self.b/255.)
		cr.paint()
		
class ColorWheel(Gtk.DrawingArea):
	def __init__(self):
		Gtk.DrawingArea.__init__(self)
		self.set_size_request(200,200)
		self.add_events(Gdk.EventMask.POINTER_MOTION_MASK | Gdk.EventMask.BUTTON_PRESS_MASK | Gdk.EventMask.BUTTON_RELEASE_MASK)
		self.connect('draw', self.on_expose, None)
		self.connect('button-release-event',self.on_button_release_event)
		self.value = 255.
		self.rgb = None
		
	def set_value(self,value):
		self.value = float(value)
		self.queue_draw()

	def on_expose(self, widget, cr, data):
		cr.set_line_width (0.02)
		if self.get_allocation().width < self.get_allocation().height:
			r = self.get_allocation().width/2.
		else:
			r = self.get_allocation().height/2.
		inc = 2
		for hue in range(0,360,inc):	
			x0 = self.get_allocation().width/2.0
			y0 = self.get_allocation().height/2.0
			xi = x0
			yi = y0
			xf = x0+r*math.cos(float(hue+inc/2.0)*math.pi/180.)
			yf = y0+r*math.sin(float(hue+inc/2.0)*math.pi/180.)
			linear = cairo.LinearGradient(xi,yi,xf,yf)
			
			
			ri,gi,bi = hsv2rgb(hue,0.,self.value)
			linear.add_color_stop_rgb(0.,ri/255.,gi/255.,bi/255.)
			
			rf,gf,bf = hsv2rgb(hue,255.,self.value)
			linear.add_color_stop_rgb(1.,rf/255.,gf/255.,bf/255.)				
			cr.move_to(x0,y0)
			x1 = x0+r*math.cos(float(hue-0.5)*math.pi/180.)
			y1 = y0+r*math.sin(float(hue-0.5)*math.pi/180.)
			cr.line_to(x1,y1)
			x2 = x0+r*math.cos(float(hue+inc+0.5)*math.pi/180.)
			y2 = y0+r*math.sin(float(hue+inc+0.5)*math.pi/180.)
			cr.line_to(x2,y2)				
			cr.close_path()
			cr.set_source(linear)
			cr.fill()
				
	def on_button_release_event(self,widget,event):
		print('#####################################################')
		print(event.x,event.y)
		x = event.x - self.get_allocation().width/2.0
		y = event.y - self.get_allocation().height/2.0
		hue = math.atan(x/y)*180./math.pi + 90.
		sat = math.sqrt(math.pow(x,2.)+math.pow(y,2.))/(self.get_allocation().width/2.)
		if sat <= 1:
			#r,g,b = hsv2rgb(hue,sat,self.value/255.0)
			print(hue/255.,sat*255.)
			r,g,b = hsv2rgb(hue,sat,255.)
			self.rgb = [r,g,b]
			print(self.rgb)

class Dropper(Gtk.Window):     
	def __init__(self):
		Gtk.Window.__init__(self,type=Gtk.WindowType.TOPLEVEL)
		self.set_keep_above(True)
		self.set_title(_('Dropper'))
		self.set_default_size(250, 300)		
		self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
		self.set_icon_from_file(comun.ICON)	
		self.connect('destroy', self.close_application)
		#
		#
		vbox = Gtk.VBox()
		self.add(vbox)		
		#
		menubar = Gtk.MenuBar.new()
		vbox.pack_start(menubar,False,False,0)	
		################################################################
		filemenu = Gtk.Menu.new()
		filem = Gtk.MenuItem.new_with_label(_('File'))
		filem.set_submenu(filemenu)
		#
		sal = Gtk.ImageMenuItem.new_with_label(_('Exit'))
		sal.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_QUIT, Gtk.IconSize.MENU))		
		sal.set_always_show_image(True)
		sal.connect('activate',self.close_application)
		filemenu.append(sal)
		#
		menubar.append(filem)
		################################################################
		filehelp = Gtk.Menu.new()
		fileh = Gtk.MenuItem.new_with_label(_('Help'))
		fileh.set_submenu(self.get_help_menu())
		#
		menubar.append(fileh)
		################################################################
				
		table = Gtk.Table(rows=3,columns=3,homogeneous=False)		
		vbox.pack_start(table,True,True,0)	
		#
		frame_color = Gtk.Frame(label = _('Color'))
		table.attach(frame_color,0,1,0,1, xpadding=3, ypadding=3)
		table_frame_color = Gtk.Table(rows=2,columns=3)
		frame_color.add(table_frame_color)
		self.colorarea = ColorArea()
		table_frame_color.attach(self.colorarea,0,3,0,1, xpadding=3, ypadding=3)
		self.entry = Gtk.Entry()
		self.entry.set_editable(False)
		table_frame_color.attach(self.entry,0,1,1,2, xpadding=3, ypadding=3)
		button_copy =Gtk.Button()
		button_copy.set_tooltip_text(_('Copy'))	
		button_copy.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_COPY,Gtk.IconSize.BUTTON))
		button_copy.connect("button-release-event", self.on_button_copy_clicked)		
		table_frame_color.attach(button_copy,1,2,1,2, xpadding=3, ypadding=3)
		button_paste =Gtk.Button()
		button_paste.set_tooltip_text(_('Paste'))	
		button_paste.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_PASTE,Gtk.IconSize.BUTTON))
		button_paste.connect("button-release-event", self.on_button_paste_clicked)				
		table_frame_color.attach(button_paste,2,3,1,2, xpadding=3, ypadding=3)
		self.entry2 = Gtk.Entry()
		self.entry2.set_editable(False)
		table_frame_color.attach(self.entry2,0,1,2,3, xpadding=3, ypadding=3)
		button_copy2 =Gtk.Button()
		button_copy2.set_tooltip_text(_('Copy'))	
		button_copy2.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_COPY,Gtk.IconSize.BUTTON))
		button_copy2.connect("button-release-event", self.on_button_copy_clicked2)		
		table_frame_color.attach(button_copy2,1,2,2,3, xpadding=3, ypadding=3)
		button_paste2 =Gtk.Button()
		button_paste2.set_tooltip_text(_('Paste'))	
		button_paste2.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_PASTE,Gtk.IconSize.BUTTON))
		button_paste2.connect("button-release-event", self.on_button_paste_clicked2)				
		table_frame_color.attach(button_paste2,2,3,2,3, xpadding=3, ypadding=3)
		#
		color_scales_notebook = Gtk.Notebook()
		table.attach(color_scales_notebook,1,2,0,1, xpadding=3, ypadding=3)
		
		frame_rgb = Gtk.Frame()
		#table.attach(frame_rgb,1,2,0,1, xpadding=3, ypadding=3)
		color_scales_notebook.append_page(frame_rgb,tab_label=Gtk.Label(_('RGB')))
		table_frame_rgb  = Gtk.Table(rows=6,columns=3)
		frame_rgb.add(table_frame_rgb)
		label1 = Gtk.Label(_('Red'))	
		table_frame_rgb.attach(label1,0,1,0,2, xpadding=3, ypadding=3)
		label2 = Gtk.Label(_('Green'))	
		table_frame_rgb.attach(label2,0,1,2,4, xpadding=3, ypadding=3)
		label3 = Gtk.Label(_('Blue'))
		table_frame_rgb.attach(label3,0,1,4,6, xpadding=3, ypadding=3)

		self.scale_r = Gtk.HScale()
		self.scale_r.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=255, step_incr=1,page_incr=1))
		self.scale_r.set_digits(0)
		self.scale_r.connect('change-value',self.on_color_modified,'rgb')
		table_frame_rgb.attach(self.scale_r,1,2,0,1, xpadding=3, ypadding=3)
		self.gradientarea_r = GradientArea(0,0,0,'r')
		table_frame_rgb.attach(self.gradientarea_r,1,2,1,2, xpadding=3, ypadding=3)

		self.scale_g = Gtk.HScale()
		self.scale_g.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=255, step_incr=1))
		self.scale_g.set_digits(0)
		self.scale_g.connect('change-value',self.on_color_modified,'rgb')
		table_frame_rgb.attach(self.scale_g,1,2,2,3, xpadding=3, ypadding=3)
		self.gradientarea_g = GradientArea(0,0,0,'g')
		table_frame_rgb.attach(self.gradientarea_g,1,2,3,4, xpadding=3, ypadding=3)

		self.scale_b = Gtk.HScale()
		self.scale_b.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=255, step_incr=1))
		self.scale_b.set_digits(0)
		self.scale_b.connect('change-value',self.on_color_modified,'rgb')
		table_frame_rgb.attach(self.scale_b,1,2,4,5, xpadding=3, ypadding=3)
		self.gradientarea_b = GradientArea(0,0,0,'b')
		table_frame_rgb.attach(self.gradientarea_b,1,2,5,6, xpadding=3, ypadding=3)
		#
		frame_hsv = Gtk.Frame()
		color_scales_notebook.append_page(frame_hsv,tab_label=Gtk.Label(_('HSV')))
		table_frame_hsv  = Gtk.Table(rows=6,columns=3)
		frame_hsv.add(table_frame_hsv)
		label1 = Gtk.Label(_('Hue'))	
		table_frame_hsv.attach(label1,0,1,0,2, xpadding=3, ypadding=3)
		label2 = Gtk.Label(_('Saturation'))	
		table_frame_hsv.attach(label2,0,1,2,4, xpadding=3, ypadding=3)
		label3 = Gtk.Label(_('Value'))	
		table_frame_hsv.attach(label3,0,1,4,6, xpadding=3, ypadding=3)

		self.scale_h = Gtk.HScale()
		self.scale_h.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=359, step_incr=1))
		self.scale_h.set_digits(0)
		self.scale_h.connect('change-value',self.on_color_modified,'hsv')
		table_frame_hsv.attach(self.scale_h,1,2,0,1, xpadding=3, ypadding=3)
		self.gradientarea_h = GradientAreaHSV(0,0,0,'h')
		table_frame_hsv.attach(self.gradientarea_h,1,2,1,2, xpadding=3, ypadding=3)

		self.scale_s = Gtk.HScale()
		self.scale_s.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=255, step_incr=1))
		self.scale_s.set_digits(0)
		self.scale_s.connect('change-value',self.on_color_modified,'hsv')
		table_frame_hsv.attach(self.scale_s,1,2,2,3, xpadding=3, ypadding=3)
		self.gradientarea_s = GradientAreaHSV(0,0,0,'s')
		table_frame_hsv.attach(self.gradientarea_s,1,2,3,4, xpadding=3, ypadding=3)

		self.scale_v = Gtk.HScale()
		self.scale_v.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=255, step_incr=1))
		self.scale_v.set_digits(0)
		self.scale_v.connect('change-value',self.on_color_modified,'hsv')
		table_frame_hsv.attach(self.scale_v,1,2,4,5, xpadding=3, ypadding=3)
		self.gradientarea_v = GradientAreaHSV(0,0,0,'v')
		table_frame_hsv.attach(self.gradientarea_v,1,2,5,6, xpadding=3, ypadding=3)
		#
		frame_cmy= Gtk.Frame()
		color_scales_notebook.append_page(frame_cmy,tab_label=Gtk.Label(_('CMY')))
		table_frame_cmy  = Gtk.Table(rows=6,columns=3)
		frame_cmy.add(table_frame_cmy)
		label1 = Gtk.Label(_('Cyan'))	
		table_frame_cmy.attach(label1,0,1,0,2, xpadding=3, ypadding=3)
		label2 = Gtk.Label(_('Magenta'))	
		table_frame_cmy.attach(label2,0,1,2,4, xpadding=3, ypadding=3)
		label3 = Gtk.Label(_('Yellow'))	
		table_frame_cmy.attach(label3,0,1,4,6, xpadding=3, ypadding=3)

		self.scale_c = Gtk.HScale()
		self.scale_c.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_c.set_digits(2)
		self.scale_c.connect('change-value',self.on_color_modified,'cmy')
		table_frame_cmy.attach(self.scale_c,1,2,0,1, xpadding=3, ypadding=3)
		self.gradientarea_c = GradientAreaCMY(0,0,0,'c')
		table_frame_cmy.attach(self.gradientarea_c,1,2,1,2, xpadding=3, ypadding=3)

		self.scale_m = Gtk.HScale()
		self.scale_m.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_m.set_digits(2)
		self.scale_m.connect('change-value',self.on_color_modified,'cmy')
		table_frame_cmy.attach(self.scale_m,1,2,2,3, xpadding=3, ypadding=3)
		self.gradientarea_m = GradientAreaCMY(0,0,0,'m')
		table_frame_cmy.attach(self.gradientarea_m,1,2,3,4, xpadding=3, ypadding=3)

		self.scale_y = Gtk.HScale()
		self.scale_y.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_y.set_digits(2)
		self.scale_y.connect('change-value',self.on_color_modified,'cmy')
		table_frame_cmy.attach(self.scale_y,1,2,4,5, xpadding=3, ypadding=3)
		self.gradientarea_y = GradientAreaCMY(0,0,0,'y')
		table_frame_cmy.attach(self.gradientarea_y,1,2,5,6, xpadding=3, ypadding=3)

		frame_cmyk= Gtk.Frame()
		color_scales_notebook.append_page(frame_cmyk,tab_label=Gtk.Label(_('CMYK')))
		table_frame_cmyk  = Gtk.Table(rows=8,columns=3)
		frame_cmyk.add(table_frame_cmyk)
		label1 = Gtk.Label(_('Cyan'))	
		table_frame_cmyk.attach(label1,0,1,0,2, xpadding=3, ypadding=3)
		label2 = Gtk.Label(_('Magenta'))	
		table_frame_cmyk.attach(label2,0,1,2,4, xpadding=3, ypadding=3)
		label3 = Gtk.Label(_('Yellow'))	
		table_frame_cmyk.attach(label3,0,1,4,6, xpadding=3, ypadding=3)
		label4 = Gtk.Label(_('Black'))	
		table_frame_cmyk.attach(label4,0,1,6,8, xpadding=3, ypadding=3)

		self.scale_ck = Gtk.HScale()
		self.scale_ck.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_ck.set_digits(2)
		self.scale_ck.connect('change-value',self.on_color_modified,'cmyk')
		table_frame_cmyk.attach(self.scale_ck,1,2,0,1, xpadding=3, ypadding=3)
		self.gradientarea_ck = GradientAreaCMYK(0,0,0,0,'c')
		table_frame_cmyk.attach(self.gradientarea_ck,1,2,1,2, xpadding=3, ypadding=3)

		self.scale_mk = Gtk.HScale()
		self.scale_mk.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_mk.set_digits(2)
		self.scale_mk.connect('change-value',self.on_color_modified,'cmyk')
		table_frame_cmyk.attach(self.scale_mk,1,2,2,3, xpadding=3, ypadding=3)
		self.gradientarea_mk = GradientAreaCMYK(0,0,0,0,'m')
		table_frame_cmyk.attach(self.gradientarea_mk,1,2,3,4, xpadding=3, ypadding=3)

		self.scale_yk = Gtk.HScale()
		self.scale_yk.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_yk.set_digits(2)
		self.scale_yk.connect('change-value',self.on_color_modified,'cmyk')
		table_frame_cmyk.attach(self.scale_yk,1,2,4,5, xpadding=3, ypadding=3)
		self.gradientarea_yk = GradientAreaCMYK(0,0,0,0,'y')
		table_frame_cmyk.attach(self.gradientarea_yk,1,2,5,6, xpadding=3, ypadding=3)

		self.scale_kk = Gtk.HScale()
		self.scale_kk.set_adjustment(Gtk.Adjustment(value=0, lower=0, upper=1, step_incr=.01))
		self.scale_kk.set_digits(2)
		self.scale_kk.connect('change-value',self.on_color_modified,'cmyk')
		table_frame_cmyk.attach(self.scale_kk,1,2,6,7, xpadding=3, ypadding=3)
		self.gradientarea_kk = GradientAreaCMYK(0,0,0,0,'k')
		table_frame_cmyk.attach(self.gradientarea_kk,1,2,7,8, xpadding=3, ypadding=3)
		#
		frame_cw = Gtk.Frame(label = _('Color Wheel'))
		table.attach(frame_cw,0,1,1,2, xpadding=3, ypadding=3)
		table_frame_cw = Gtk.Table(rows=2,columns=1)
		frame_cw.add(table_frame_cw)
		self.colorwheel = ColorWheel()
		self.colorwheel.connect('button-release-event', self.on_color_wheel_clicked)
		table_frame_cw.attach(self.colorwheel,0,1,0,1, xpadding=3, ypadding=3)
		self.hscale = Gtk.HScale()
		self.hscale.set_adjustment(Gtk.Adjustment(value=255, lower=0, upper=255, step_incr=1))
		self.hscale.connect('value-changed',self.on_hscale_value_changed)
		self.hscale.set_digits(0)
		table_frame_cw.attach(self.hscale,0,1,1,2, xpadding=3, ypadding=3)		
		#
		frame_cp = Gtk.Frame(label = _('Capture color'))
		table.attach(frame_cp,1,2,1,2, xpadding=3, ypadding=3)
		table_frame_cp = Gtk.Table(rows=2,columns=2)
		frame_cp.add(table_frame_cp)
		button1 = Gtk.Button()
		button1.set_size_request(40,40)
		button1.set_tooltip_text(_('Color picker'))	
		button1.set_image(Gtk.Image.new_from_stock(Gtk.STOCK_COLOR_PICKER,Gtk.IconSize.BUTTON))
		button1.connect("button-release-event", self.on_button1_clicked)
		table_frame_cp.attach(button1,0,1,0,1, xpadding=3, ypadding=3)

		self.liststore1 = Gtk.ListStore(str,object)
		self.liststore1.append([_('Zoom x1'),1])
		self.liststore1.append([_('Zoom x2'),2])
		self.liststore1.append([_('Zoom x3'),3])
		self.liststore1.append([_('Zoom x4'),4])
		self.liststore1.append([_('Zoom x5'),5])
		self.liststore1.append([_('Zoom x6'),6])
		self.liststore1.append([_('Zoom x7'),7])
		self.liststore1.append([_('Zoom x8'),8])
		self.liststore1.append([_('Zoom x9'),9])
		self.liststore1.append([_('Zoom x10'),10])
		self.combobox1 = Gtk.ComboBox.new()
		self.combobox1.set_model(self.liststore1)
		cell1 = Gtk.CellRendererText()
		self.combobox1.pack_start(cell1, True)
		self.combobox1.add_attribute(cell1, 'text', 0) 
		self.combobox1.set_active(0)
		table_frame_cp.attach(self.combobox1,1,2,0,1, xpadding=3, ypadding=3) 		
		# cs = Gtk.ColorSelection()
		# table_frame_cp.attach(cs,2,3,0,1, xpadding=3, ypadding=3) 	
		#
		self.image = PixbufArea()
		self.image.connect('button-release-event', self.on_image_clicked)
		table_frame_cp.attach(self.image,0,2,1,2, xpadding=3, ypadding=3) 
		#
		palettes_notebook = Gtk.Notebook()
		table.attach(palettes_notebook,2,3,0,2, xpadding=3, ypadding=3)
		frame_hexadecimal = Gtk.Frame()
		palettes_notebook.append_page(frame_hexadecimal,tab_label = Gtk.Label(_('Hexadecimal')))		
		scrolledwindow1 = Gtk.ScrolledWindow()
		scrolledwindow1.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
		scrolledwindow1.set_shadow_type(Gtk.ShadowType.ETCHED_OUT)		
		frame_hexadecimal.add(scrolledwindow1)
		treeview_hexadecimal = Gtk.TreeView.new_with_model(hexadecimal_colors())
		treeview_hexadecimal.get_selection().connect("changed", self.on_treeview_hexadecimal_changed)
		treeview_hexadecimal.set_headers_visible(False)
		scrolledwindow1.add(treeview_hexadecimal)
		treeview_hexadecimal.append_column(Gtk.TreeViewColumn(title=None,cell_renderer=Gtk.CellRendererText(),text=0,background=1))
		frame_ral=Gtk.Frame()
		palettes_notebook.append_page(frame_ral,tab_label = Gtk.Label(_('Ral')))
		scrolledwindow2 = Gtk.ScrolledWindow()
		scrolledwindow2.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
		scrolledwindow2.set_shadow_type(Gtk.ShadowType.ETCHED_OUT)		
		frame_ral.add(scrolledwindow2)
		treeview_ral = Gtk.TreeView.new_with_model(get_ral_colors())
		treeview_ral.get_selection().connect("changed", self.on_treeview_ral_changed)
		treeview_ral.set_headers_visible(False)
		scrolledwindow2.add(treeview_ral)
		treeview_ral.append_column(Gtk.TreeViewColumn(title=None,cell_renderer=Gtk.CellRendererText(),text=0,background=1))
		#
		self.entry.set_text('%s,%s,%s'%(0,0,0))
		self.entry2.set_text(RGBToHTMLColor((0,0,0)))
		self.clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
		self.show_all()
	def get_help_menu(self):
		help_menu =Gtk.Menu()
		#		
		add2menu(help_menu,text = _('In Launchpad'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://launchpad.net/dropper'))
		add2menu(help_menu,text = _('Get help online...'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://answers.launchpad.net/dropper'))
		add2menu(help_menu,text = _('Translate this application...'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://translations.launchpad.net/dropper'))
		add2menu(help_menu,text = _('Report a bug...'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://bugs.launchpad.net/dropper'))
		add2menu(help_menu)
		web = add2menu(help_menu,text = _('Homepage'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('http://www.atareao.es/tag/dropper'))
		twitter = add2menu(help_menu,text = _('Follow us in Twitter'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://twitter.com/atareao'))
		googleplus = add2menu(help_menu,text = _('Follow us in Google+'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('https://plus.google.com/118214486317320563625/posts'))
		facebook = add2menu(help_menu,text = _('Follow us in Facebook'),conector_event = 'activate',conector_action = lambda x: webbrowser.open('http://www.facebook.com/elatareao'))
		add2menu(help_menu)
		add2menu(help_menu,text = _('About'),conector_event = 'activate',conector_action = self.on_about_activate)
		#		
		web.set_image(Gtk.Image.new_from_file(os.path.join(comun.IMGDIR,'web.svg')))
		web.set_always_show_image(True)
		twitter.set_image(Gtk.Image.new_from_file(os.path.join(comun.IMGDIR,'twitter.svg')))
		twitter.set_always_show_image(True)
		googleplus.set_image(Gtk.Image.new_from_file(os.path.join(comun.IMGDIR,'googleplus.svg')))
		googleplus.set_always_show_image(True)
		facebook.set_image(Gtk.Image.new_from_file(os.path.join(comun.IMGDIR,'facebook.svg')))
		facebook.set_always_show_image(True)
		#
		help_menu.show()
		return help_menu
		
	def on_about_activate(self,widget):
		ad=Gtk.AboutDialog()
		ad.set_name(comun.APPNAME)
		ad.set_version(comun.VERSION)
		ad.set_copyright('Copyrignt (c) 2012,2013\nLorenzo Carbonell')
		ad.set_comments(_('An application to capture colors'))
		ad.set_license(''+
		'This program is free software: you can redistribute it and/or modify it\n'+
		'under the terms of the GNU General Public License as published by the\n'+
		'Free Software Foundation, either version 3 of the License, or (at your option)\n'+
		'any later version.\n\n'+
		'This program is distributed in the hope that it will be useful, but\n'+
		'WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n'+
		'or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n'+
		'more details.\n\n'+
		'You should have received a copy of the GNU General Public License along with\n'+
		'this program.  If not, see <http://www.gnu.org/licenses/>.')
		ad.set_website('http://www.atareao.es')
		ad.set_website_label('http://www.atareao.es')
		ad.set_authors(['Lorenzo Carbonell <lorenzo.carbonell.cerezo@gmail.com>'])
		ad.set_documenters(['Lorenzo Carbonell <lorenzo.carbonell.cerezo@gmail.com>'])
		ad.set_translator_credits(''+
		'Lorenzo Carbonell <lorenzo.carbonell.cerezo@gmail.com>\n')
		ad.set_program_name(comun.APPNAME)
		ad.set_logo(GdkPixbuf.Pixbuf.new_from_file(comun.ICON))
		ad.run()
		ad.destroy()
	def on_treeview_ral_changed(self,selection):
		model, treeiter = selection.get_selected()
		if treeiter != None:
			name,color = model[treeiter]
			print(name,color)
			r,g,b = HTMLColorToRGB(color)
			h,s,v = rgb2hsv(r,g,b)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)		
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
	def on_treeview_hexadecimal_changed(self,selection):
		model, treeiter = selection.get_selected()
		if treeiter != None:
			name,color = model[treeiter]
			print(name,color)
			r,g,b = HTMLColorToRGB(color)
			h,s,v = rgb2hsv(r,g,b)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)		
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)						
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
			
	def on_button_copy_clicked(self,widget,event):
		self.clipboard.set_text(self.entry.get_text(), -1)

	def on_button_copy_clicked2(self,widget,event):
		self.clipboard.set_text(self.entry2.get_text(), -1)
		
	def on_button_paste_clicked(self,widget,event):
		text = self.clipboard.wait_for_text()
		if text is not None:
			if text.find(',')>-1:
				content = text.split(',')
				if len(content)==3:
					r=int(content[0])
					g=int(content[1])
					b=int(content[2])
					h,s,v = rgb2hsv(r,g,b)
					self.scale_r.set_value(r)
					self.scale_g.set_value(g)
					self.scale_b.set_value(b)
					self.gradientarea_r.set_rgb(r,g,b)
					self.gradientarea_g.set_rgb(r,g,b)
					self.gradientarea_b.set_rgb(r,g,b)
					self.scale_h.set_value(h)
					self.scale_s.set_value(s)
					self.scale_v.set_value(v)		
					self.gradientarea_h.set_hsv(h,s,v)
					self.gradientarea_s.set_hsv(h,s,v)
					self.gradientarea_v.set_hsv(h,s,v)
					c,m,y = rgb2cmy(r,g,b)
					self.scale_c.set_value(c)
					self.scale_m.set_value(m)
					self.scale_y.set_value(y)
					self.gradientarea_c.set_cmy(c,m,y)
					self.gradientarea_m.set_cmy(c,m,y)
					self.gradientarea_y.set_cmy(c,m,y)
					c,m,y,k = cmy2cmyk(c,m,y)
					self.scale_ck.set_value(c)
					self.scale_mk.set_value(m)
					self.scale_yk.set_value(y)
					self.scale_kk.set_value(k)
					self.gradientarea_ck.set_cmyk(c,m,y,k)
					self.gradientarea_mk.set_cmyk(c,m,y,k)
					self.gradientarea_yk.set_cmyk(c,m,y,k)
					self.gradientarea_kk.set_cmyk(c,m,y,k)										
					self.colorarea.set_rgb(r,g,b)
					self.entry.set_text('%s,%s,%s'%(r,g,b))
					self.entry2.set_text(RGBToHTMLColor((r,g,b)))

	def on_button_paste_clicked2(self,widget,event):
		text = self.clipboard.wait_for_text()
		ans = HTMLColorToRGB(text)		
		if ans is not None:
			r,g,b = ans
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))


	def on_color_modified(self,widget,a,b,element):
		if element == 'rgb':
			r = int(self.scale_r.get_value())
			g = int(self.scale_g.get_value())
			b = int(self.scale_b.get_value())
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			h,s,v = rgb2hsv(r,g,b)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)		
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)			
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
		elif element == 'hsv':
			h = int(self.scale_h.get_value())
			s = int(self.scale_s.get_value())
			v = int(self.scale_v.get_value())
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			r,g,b = hsv2rgb(h,s,v)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
		elif element == 'cmy':
			c = self.scale_c.get_value()
			m = self.scale_m.get_value()
			y = self.scale_y.get_value()
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)			
			r,g,b = cmy2rgb(c,m,y)
			h,s,v = rgb2hsv(r,g,b)
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)
			r,g,b = hsv2rgb(h,s,v)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)			
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
		elif element == 'cmyk':
			c = self.scale_ck.get_value()
			m = self.scale_mk.get_value()
			y = self.scale_yk.get_value()
			k = self.scale_kk.get_value()
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)			
			self.gradientarea_kk.set_cmyk(c,m,y,k)			
			r,g,b = cmyk2rgb(c,m,y,k)
			h,s,v = rgb2hsv(r,g,b)
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)
			r,g,b = hsv2rgb(h,s,v)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))


	def on_hscale_value_changed(self,widget):
		self.colorwheel.set_value(self.hscale.get_value())
		
	def close_application(self,widget):
		exit(0)

	def on_image_clicked(self,widget,event):
		pointer,x,y,mods = self.get_screen().get_root_window().get_pointer()
		color = get_pixel_colour(x,y)
		if color is not None:
			r,g,b = color
			h,s,v = rgb2hsv(r,g,b)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)		
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)			
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
		
	def on_button1_clicked(self,widget,data):
		model = self.combobox1.get_model()
		zoom = model.get_value(self.combobox1.get_active_iter(),1)
		self.acapturer = Capturer(zoom)
		self.acapturer.connect("motion-notify-event", self.on_capturer_mousemove)	

	def on_capturer_mousemove(self,widget,event):
		self.image.set_pixbuf(self.acapturer.pb)

	def on_color_wheel_clicked(self,widget,event):
		r,g,b = widget.rgb
		print(r,g,b)
		pointer,x,y,mods = self.get_screen().get_root_window().get_pointer()
		color = get_pixel_colour(x,y)
		if color is not None:
			r,g,b = color
			h,s,v = rgb2hsv(r,g,b)
			self.scale_r.set_value(r)
			self.scale_g.set_value(g)
			self.scale_b.set_value(b)
			self.gradientarea_r.set_rgb(r,g,b)
			self.gradientarea_g.set_rgb(r,g,b)
			self.gradientarea_b.set_rgb(r,g,b)
			self.scale_h.set_value(h)
			self.scale_s.set_value(s)
			self.scale_v.set_value(v)		
			self.gradientarea_h.set_hsv(h,s,v)
			self.gradientarea_s.set_hsv(h,s,v)
			self.gradientarea_v.set_hsv(h,s,v)
			c,m,y = rgb2cmy(r,g,b)
			self.scale_c.set_value(c)
			self.scale_m.set_value(m)
			self.scale_y.set_value(y)
			self.gradientarea_c.set_cmy(c,m,y)
			self.gradientarea_m.set_cmy(c,m,y)
			self.gradientarea_y.set_cmy(c,m,y)
			c,m,y,k = cmy2cmyk(c,m,y)
			self.scale_ck.set_value(c)
			self.scale_mk.set_value(m)
			self.scale_yk.set_value(y)
			self.scale_kk.set_value(k)
			self.gradientarea_ck.set_cmyk(c,m,y,k)
			self.gradientarea_mk.set_cmyk(c,m,y,k)
			self.gradientarea_yk.set_cmyk(c,m,y,k)
			self.gradientarea_kk.set_cmyk(c,m,y,k)			
			self.colorarea.set_rgb(r,g,b)
			self.entry.set_text('%s,%s,%s'%(r,g,b))
			self.entry2.set_text(RGBToHTMLColor((r,g,b)))
def get_pantone_colors():
	liststore = Gtk.ListStore(str, Gdk.Color)
	liststore.append([_("100"),Gdk.color_parse("#F4ED7C")])
	liststore.append([_("101"),Gdk.color_parse("#F4ED47")])
	liststore.append([_("102"),Gdk.color_parse("#F9E814")])
	liststore.append([_("103"),Gdk.color_parse("#C6AD0F")])
	liststore.append([_("104"),Gdk.color_parse("#AD9B0C")])
	liststore.append([_("105"),Gdk.color_parse("#82750F")])
	liststore.append([_("106"),Gdk.color_parse("#F7E859")])
	liststore.append([_("107"),Gdk.color_parse("#F9E526")])
	liststore.append([_("108"),Gdk.color_parse("#F9DD16")])
	liststore.append([_("109"),Gdk.color_parse("#F9D616")])
	liststore.append([_("110"),Gdk.color_parse("#D8B511")])
	liststore.append([_("111"),Gdk.color_parse("#AA930A")])
	liststore.append([_("112"),Gdk.color_parse("#99840A")])
	liststore.append([_("113"),Gdk.color_parse("#F9E55B")])
	liststore.append([_("114"),Gdk.color_parse("#F9E24C")])
	liststore.append([_("115"),Gdk.color_parse("#F9E04C")])
	liststore.append([_("116"),Gdk.color_parse("#FCD116")])
	liststore.append([_("116"),Gdk.color_parse("#F7B50C")])
	liststore.append([_("117"),Gdk.color_parse("#C6A00C")])
	liststore.append([_("118"),Gdk.color_parse("#AA8E0A")])
	liststore.append([_("119"),Gdk.color_parse("#897719")])
	liststore.append([_("120"),Gdk.color_parse("#F9E27F")])
	liststore.append([_("1205"),Gdk.color_parse("#F7E8AA")])
	liststore.append([_("121"),Gdk.color_parse("#F9E070")])
	liststore.append([_("1215"),Gdk.color_parse("#F9E08C")])
	liststore.append([_("122"),Gdk.color_parse("#FCD856")])
	liststore.append([_("1225"),Gdk.color_parse("#FFCC49")])
	liststore.append([_("123"),Gdk.color_parse("#FFC61E")])
	liststore.append([_("1235"),Gdk.color_parse("#FCB514")])
	liststore.append([_("124"),Gdk.color_parse("#E0AA0F")])
	liststore.append([_("1245"),Gdk.color_parse("#BF910C")])
	liststore.append([_("125"),Gdk.color_parse("#B58C0A")])
	liststore.append([_("1255"),Gdk.color_parse("#A37F14")])
	liststore.append([_("126"),Gdk.color_parse("#A38205")])
	liststore.append([_("1265"),Gdk.color_parse("#7C6316")])
	liststore.append([_("127"),Gdk.color_parse("#F4E287")])
	liststore.append([_("128"),Gdk.color_parse("#F4DB60")])
	liststore.append([_("129"),Gdk.color_parse("#F2D13D")])
	liststore.append([_("130"),Gdk.color_parse("#EAAF0F")])
	liststore.append([_("130"),Gdk.color_parse("#E29100")])
	liststore.append([_("131"),Gdk.color_parse("#C6930A")])
	liststore.append([_("132"),Gdk.color_parse("#9E7C0A")])
	liststore.append([_("133"),Gdk.color_parse("#705B0A")])
	liststore.append([_("134"),Gdk.color_parse("#FFD87F")])
	liststore.append([_("1345"),Gdk.color_parse("#FFD691")])
	liststore.append([_("135"),Gdk.color_parse("#FCC963")])
	liststore.append([_("1355"),Gdk.color_parse("#FCCE87")])
	liststore.append([_("136"),Gdk.color_parse("#FCBF49")])
	liststore.append([_("1365"),Gdk.color_parse("#FCBA5E")])
	liststore.append([_("137"),Gdk.color_parse("#FCA311")])
	liststore.append([_("1375"),Gdk.color_parse("#F99B0C")])
	liststore.append([_("138"),Gdk.color_parse("#D88C02")])
	liststore.append([_("1385"),Gdk.color_parse("#CC7A02")])
	liststore.append([_("139"),Gdk.color_parse("#AF7505")])
	liststore.append([_("1395"),Gdk.color_parse("#996007")])
	liststore.append([_("140"),Gdk.color_parse("#7A5B11")])
	liststore.append([_("1405"),Gdk.color_parse("#6B4714")])
	liststore.append([_("141"),Gdk.color_parse("#F2CE68")])
	liststore.append([_("142"),Gdk.color_parse("#F2BF49")])
	liststore.append([_("143"),Gdk.color_parse("#EFB22D")])
	liststore.append([_("144"),Gdk.color_parse("#E28C05")])
	liststore.append([_("145"),Gdk.color_parse("#C67F07")])
	liststore.append([_("146"),Gdk.color_parse("#9E6B05")])
	liststore.append([_("147"),Gdk.color_parse("#725E26")])
	liststore.append([_("148"),Gdk.color_parse("#FFD69B")])
	liststore.append([_("1485"),Gdk.color_parse("#FFB777")])
	liststore.append([_("149"),Gdk.color_parse("#FCCC93")])
	liststore.append([_("1495"),Gdk.color_parse("#FF993F")])
	liststore.append([_("150"),Gdk.color_parse("#FCAD56")])
	liststore.append([_("1505"),Gdk.color_parse("#F47C00")])
	liststore.append([_("151"),Gdk.color_parse("#F77F00")])
	liststore.append([_("152"),Gdk.color_parse("#DD7500")])
	liststore.append([_("1525"),Gdk.color_parse("#B55400")])
	liststore.append([_("153"),Gdk.color_parse("#BC6D0A")])
	liststore.append([_("1535"),Gdk.color_parse("#8C4400")])
	liststore.append([_("154"),Gdk.color_parse("#995905")])
	liststore.append([_("1545"),Gdk.color_parse("#4C280F")])
	liststore.append([_("155"),Gdk.color_parse("#F4DBAA")])
	liststore.append([_("1555"),Gdk.color_parse("#F9BF9E")])
	liststore.append([_("156"),Gdk.color_parse("#F2C68C")])
	liststore.append([_("1565"),Gdk.color_parse("#FCA577")])
	liststore.append([_("157"),Gdk.color_parse("#EDA04F")])
	liststore.append([_("1575"),Gdk.color_parse("#FC8744")])
	liststore.append([_("158"),Gdk.color_parse("#E87511")])
	liststore.append([_("1585"),Gdk.color_parse("#F96B07")])
	liststore.append([_("159"),Gdk.color_parse("#C66005")])
	liststore.append([_("1595"),Gdk.color_parse("#D15B05")])
	liststore.append([_("160"),Gdk.color_parse("#9E540A")])
	liststore.append([_("1605"),Gdk.color_parse("#A04F11")])
	liststore.append([_("161"),Gdk.color_parse("#633A11")])
	liststore.append([_("1615"),Gdk.color_parse("#843F0F")])
	liststore.append([_("162"),Gdk.color_parse("#F9C6AA")])
	liststore.append([_("1625"),Gdk.color_parse("#F9A58C")])
	liststore.append([_("163"),Gdk.color_parse("#FC9E70")])
	liststore.append([_("1635"),Gdk.color_parse("#F98E6D")])
	liststore.append([_("164"),Gdk.color_parse("#FC7F3F")])
	liststore.append([_("1645"),Gdk.color_parse("#F97242")])
	liststore.append([_("165"),Gdk.color_parse("#F96302")])
	liststore.append([_("165"),Gdk.color_parse("#EA4F00")])
	liststore.append([_("1655"),Gdk.color_parse("#F95602")])
	liststore.append([_("166"),Gdk.color_parse("#DD5900")])
	liststore.append([_("1665"),Gdk.color_parse("#DD4F05")])
	liststore.append([_("167"),Gdk.color_parse("#BC4F07")])
	liststore.append([_("1675"),Gdk.color_parse("#A53F0F")])
	liststore.append([_("168"),Gdk.color_parse("#6D3011")])
	liststore.append([_("1685"),Gdk.color_parse("#843511")])
	liststore.append([_("169"),Gdk.color_parse("#F9BAAA")])
	liststore.append([_("170"),Gdk.color_parse("#F98972")])
	liststore.append([_("171"),Gdk.color_parse("#F9603A")])
	liststore.append([_("172"),Gdk.color_parse("#F74902")])
	liststore.append([_("173"),Gdk.color_parse("#D14414")])
	liststore.append([_("174"),Gdk.color_parse("#933311")])
	liststore.append([_("175"),Gdk.color_parse("#6D3321")])
	liststore.append([_("176"),Gdk.color_parse("#F9AFAD")])
	liststore.append([_("1765"),Gdk.color_parse("#F99EA3")])
	liststore.append([_("1767"),Gdk.color_parse("#F9B2B7")])
	liststore.append([_("177"),Gdk.color_parse("#F9827F")])
	liststore.append([_("1775"),Gdk.color_parse("#F9848E")])
	liststore.append([_("1777"),Gdk.color_parse("#FC6675")])
	liststore.append([_("178"),Gdk.color_parse("#F95E59")])
	liststore.append([_("1785"),Gdk.color_parse("#FC4F59")])
	liststore.append([_("1787"),Gdk.color_parse("#F43F4F")])
	liststore.append([_("1788"),Gdk.color_parse("#EF2B2D")])
	liststore.append([_("1788"),Gdk.color_parse("#D62100")])
	liststore.append([_("179"),Gdk.color_parse("#E23D28")])
	liststore.append([_("1795"),Gdk.color_parse("#D62828")])
	liststore.append([_("1797"),Gdk.color_parse("#CC2D30")])
	liststore.append([_("180"),Gdk.color_parse("#C13828")])
	liststore.append([_("1805"),Gdk.color_parse("#AF2626")])
	liststore.append([_("1807"),Gdk.color_parse("#A03033")])
	liststore.append([_("181"),Gdk.color_parse("#7C2D23")])
	liststore.append([_("1810"),Gdk.color_parse("#7C211E")])
	liststore.append([_("1817"),Gdk.color_parse("#5B2D28")])
	liststore.append([_("182"),Gdk.color_parse("#F9BFC1")])
	liststore.append([_("183"),Gdk.color_parse("#FC8C99")])
	liststore.append([_("184"),Gdk.color_parse("#FC5E72")])
	liststore.append([_("185"),Gdk.color_parse("#E8112D")])
	liststore.append([_("185"),Gdk.color_parse("#D11600")])
	liststore.append([_("186"),Gdk.color_parse("#CE1126")])
	liststore.append([_("187"),Gdk.color_parse("#AF1E2D")])
	liststore.append([_("188"),Gdk.color_parse("#7C2128")])
	liststore.append([_("189"),Gdk.color_parse("#FFA3B2")])
	liststore.append([_("1895"),Gdk.color_parse("#FCBFC9")])
	liststore.append([_("190"),Gdk.color_parse("#FC758E")])
	liststore.append([_("1905"),Gdk.color_parse("#FC9BB2")])
	liststore.append([_("191"),Gdk.color_parse("#F4476B")])
	liststore.append([_("1915"),Gdk.color_parse("#F4547C")])
	liststore.append([_("192"),Gdk.color_parse("#E5053A")])
	liststore.append([_("1925"),Gdk.color_parse("#E00747")])
	liststore.append([_("193"),Gdk.color_parse("#DB828C")])
	liststore.append([_("1935"),Gdk.color_parse("#C10538")])
	liststore.append([_("194"),Gdk.color_parse("#992135")])
	liststore.append([_("1945"),Gdk.color_parse("#A80C35")])
	liststore.append([_("1955"),Gdk.color_parse("#931638")])
	liststore.append([_("196"),Gdk.color_parse("#F4C9C9")])
	liststore.append([_("197"),Gdk.color_parse("#EF99A3")])
	liststore.append([_("198"),Gdk.color_parse("#772D35")])
	liststore.append([_("199"),Gdk.color_parse("#D81C3F")])
	liststore.append([_("200"),Gdk.color_parse("#C41E3A")])
	liststore.append([_("201"),Gdk.color_parse("#A32638")])
	liststore.append([_("202"),Gdk.color_parse("#8C2633")])
	liststore.append([_("203"),Gdk.color_parse("#F2AFC1")])
	liststore.append([_("204"),Gdk.color_parse("#ED7A9E")])
	liststore.append([_("205"),Gdk.color_parse("#E54C7C")])
	liststore.append([_("206"),Gdk.color_parse("#D30547")])
	liststore.append([_("207"),Gdk.color_parse("#BAAA9E")])
	liststore.append([_("208"),Gdk.color_parse("#8E2344")])
	liststore.append([_("209"),Gdk.color_parse("#75263D")])
	liststore.append([_("210"),Gdk.color_parse("#FFA0BF")])
	liststore.append([_("211"),Gdk.color_parse("#FF77A8")])
	liststore.append([_("212"),Gdk.color_parse("#F94F8E")])
	liststore.append([_("213"),Gdk.color_parse("#EA0F6B")])
	liststore.append([_("214"),Gdk.color_parse("#CC0256")])
	liststore.append([_("215"),Gdk.color_parse("#A50544")])
	liststore.append([_("216"),Gdk.color_parse("#7C1E3F")])
	liststore.append([_("217"),Gdk.color_parse("#F4BFD1")])
	liststore.append([_("218"),Gdk.color_parse("#ED72AA")])
	liststore.append([_("219"),Gdk.color_parse("#E22882")])
	liststore.append([_("220"),Gdk.color_parse("#AA004F")])
	liststore.append([_("221"),Gdk.color_parse("#930042")])
	liststore.append([_("222"),Gdk.color_parse("#70193D")])
	liststore.append([_("223"),Gdk.color_parse("#F993C4")])
	liststore.append([_("224"),Gdk.color_parse("#F46BAF")])
	liststore.append([_("225"),Gdk.color_parse("#ED2893")])
	liststore.append([_("226"),Gdk.color_parse("#D60270")])
	liststore.append([_("227"),Gdk.color_parse("#AD005B")])
	liststore.append([_("228"),Gdk.color_parse("#8C004C")])
	liststore.append([_("229"),Gdk.color_parse("#6D213F")])
	liststore.append([_("230"),Gdk.color_parse("#FFA0CC")])
	liststore.append([_("231"),Gdk.color_parse("#FC70BA")])
	liststore.append([_("232"),Gdk.color_parse("#F43FA5")])
	liststore.append([_("233"),Gdk.color_parse("#CE007C")])
	liststore.append([_("234"),Gdk.color_parse("#AA0066")])
	liststore.append([_("235"),Gdk.color_parse("#8E0554")])
	liststore.append([_("236"),Gdk.color_parse("#F9AFD3")])
	liststore.append([_("2365"),Gdk.color_parse("#F7C4D8")])
	liststore.append([_("237"),Gdk.color_parse("#F484C4")])
	liststore.append([_("2375"),Gdk.color_parse("#EA6BBF")])
	liststore.append([_("238"),Gdk.color_parse("#ED4FAF")])
	liststore.append([_("2385"),Gdk.color_parse("#DB28A5")])
	liststore.append([_("239"),Gdk.color_parse("#E0219E")])
	liststore.append([_("239"),Gdk.color_parse("#C4057C")])
	liststore.append([_("2395"),Gdk.color_parse("#C4008C")])
	liststore.append([_("240"),Gdk.color_parse("#C40F89")])
	liststore.append([_("2405"),Gdk.color_parse("#A8007A")])
	liststore.append([_("241"),Gdk.color_parse("#AD0075")])
	liststore.append([_("2415"),Gdk.color_parse("#9B0070")])
	liststore.append([_("242"),Gdk.color_parse("#7C1C51")])
	liststore.append([_("2425"),Gdk.color_parse("#87005B")])
	liststore.append([_("243"),Gdk.color_parse("#F2BAD8")])
	liststore.append([_("244"),Gdk.color_parse("#EDA0D3")])
	liststore.append([_("245"),Gdk.color_parse("#E87FC9")])
	liststore.append([_("246"),Gdk.color_parse("#CC00A0")])
	liststore.append([_("247"),Gdk.color_parse("#B7008E")])
	liststore.append([_("248"),Gdk.color_parse("#A3057F")])
	liststore.append([_("249"),Gdk.color_parse("#7F2860")])
	liststore.append([_("250"),Gdk.color_parse("#EDC4DD")])
	liststore.append([_("251"),Gdk.color_parse("#E29ED6")])
	liststore.append([_("252"),Gdk.color_parse("#D36BC6")])
	liststore.append([_("253"),Gdk.color_parse("#AF23A5")])
	liststore.append([_("254"),Gdk.color_parse("#A02D96")])
	liststore.append([_("255"),Gdk.color_parse("#772D6B")])
	liststore.append([_("256"),Gdk.color_parse("#E5C4D6")])
	liststore.append([_("2562"),Gdk.color_parse("#D8A8D8")])
	liststore.append([_("2563"),Gdk.color_parse("#D1A0CC")])
	liststore.append([_("2567"),Gdk.color_parse("#BF93CC")])
	liststore.append([_("257"),Gdk.color_parse("#D3A5C9")])
	liststore.append([_("2572"),Gdk.color_parse("#C687D1")])
	liststore.append([_("2573"),Gdk.color_parse("#BA7CBC")])
	liststore.append([_("2577"),Gdk.color_parse("#AA72BF")])
	liststore.append([_("258"),Gdk.color_parse("#9B4F96")])
	liststore.append([_("2582"),Gdk.color_parse("#AA47BA")])
	liststore.append([_("2583"),Gdk.color_parse("#9E4FA5")])
	liststore.append([_("2587"),Gdk.color_parse("#8E47AD")])
	liststore.append([_("259"),Gdk.color_parse("#72166B")])
	liststore.append([_("2592"),Gdk.color_parse("#930FA5")])
	liststore.append([_("2592"),Gdk.color_parse("#720082")])
	liststore.append([_("2593"),Gdk.color_parse("#872B93")])
	liststore.append([_("2597"),Gdk.color_parse("#66008C")])
	liststore.append([_("260"),Gdk.color_parse("#681E5B")])
	liststore.append([_("2602"),Gdk.color_parse("#820C8E")])
	liststore.append([_("2603"),Gdk.color_parse("#70147A")])
	liststore.append([_("2607"),Gdk.color_parse("#5B027A")])
	liststore.append([_("261"),Gdk.color_parse("#5E2154")])
	liststore.append([_("2612"),Gdk.color_parse("#701E72")])
	liststore.append([_("2613"),Gdk.color_parse("#66116D")])
	liststore.append([_("2617"),Gdk.color_parse("#560C70")])
	liststore.append([_("262"),Gdk.color_parse("#542344")])
	liststore.append([_("2622"),Gdk.color_parse("#602D59")])
	liststore.append([_("2623"),Gdk.color_parse("#5B195E")])
	liststore.append([_("2627"),Gdk.color_parse("#4C145E")])
	liststore.append([_("263"),Gdk.color_parse("#E0CEE0")])
	liststore.append([_("2635"),Gdk.color_parse("#C9ADD8")])
	liststore.append([_("264"),Gdk.color_parse("#C6AADB")])
	liststore.append([_("2645"),Gdk.color_parse("#B591D1")])
	liststore.append([_("265"),Gdk.color_parse("#9663C4")])
	liststore.append([_("2655"),Gdk.color_parse("#9B6DC6")])
	liststore.append([_("266"),Gdk.color_parse("#6D28AA")])
	liststore.append([_("2665"),Gdk.color_parse("#894FBF")])
	liststore.append([_("267"),Gdk.color_parse("#59118E")])
	liststore.append([_("268"),Gdk.color_parse("#4F2170")])
	liststore.append([_("2685"),Gdk.color_parse("#56008C")])
	liststore.append([_("269"),Gdk.color_parse("#442359")])
	liststore.append([_("2695"),Gdk.color_parse("#44235E")])
	liststore.append([_("270"),Gdk.color_parse("#BAAFD3")])
	liststore.append([_("2705"),Gdk.color_parse("#AD9ED3")])
	liststore.append([_("2706"),Gdk.color_parse("#D1CEDD")])
	liststore.append([_("2707"),Gdk.color_parse("#BFD1E5")])
	liststore.append([_("2708"),Gdk.color_parse("#AFBCDB")])
	liststore.append([_("271"),Gdk.color_parse("#9E91C6")])
	liststore.append([_("2715"),Gdk.color_parse("#937ACC")])
	liststore.append([_("2716"),Gdk.color_parse("#A5A0D6")])
	liststore.append([_("2717"),Gdk.color_parse("#A5BAE0")])
	liststore.append([_("2718"),Gdk.color_parse("#5B77CC")])
	liststore.append([_("272"),Gdk.color_parse("#8977BA")])
	liststore.append([_("2725"),Gdk.color_parse("#7251BC")])
	liststore.append([_("2726"),Gdk.color_parse("#6656BC")])
	liststore.append([_("2727"),Gdk.color_parse("#5E68C4")])
	liststore.append([_("2728"),Gdk.color_parse("#3044B5")])
	liststore.append([_("273"),Gdk.color_parse("#38197A")])
	liststore.append([_("2735"),Gdk.color_parse("#4F0093")])
	liststore.append([_("2736"),Gdk.color_parse("#4930AD")])
	liststore.append([_("2738"),Gdk.color_parse("#2D008E")])
	liststore.append([_("274"),Gdk.color_parse("#2B1166")])
	liststore.append([_("2745"),Gdk.color_parse("#3F0077")])
	liststore.append([_("2746"),Gdk.color_parse("#3F2893")])
	liststore.append([_("2747"),Gdk.color_parse("#1C146B")])
	liststore.append([_("2748"),Gdk.color_parse("#1E1C77")])
	liststore.append([_("275"),Gdk.color_parse("#260F54")])
	liststore.append([_("2755"),Gdk.color_parse("#35006D")])
	liststore.append([_("2756"),Gdk.color_parse("#332875")])
	liststore.append([_("2757"),Gdk.color_parse("#141654")])
	liststore.append([_("2758"),Gdk.color_parse("#192168")])
	liststore.append([_("276"),Gdk.color_parse("#2B2147")])
	liststore.append([_("2765"),Gdk.color_parse("#2B0C56")])
	liststore.append([_("2766"),Gdk.color_parse("#2B265B")])
	liststore.append([_("2767"),Gdk.color_parse("#14213D")])
	liststore.append([_("2768"),Gdk.color_parse("#112151")])
	liststore.append([_("277"),Gdk.color_parse("#B5D1E8")])
	liststore.append([_("278"),Gdk.color_parse("#99BADD")])
	liststore.append([_("279"),Gdk.color_parse("#6689CC")])
	liststore.append([_("280"),Gdk.color_parse("#002B7F")])
	liststore.append([_("281"),Gdk.color_parse("#002868")])
	liststore.append([_("282"),Gdk.color_parse("#002654")])
	liststore.append([_("283"),Gdk.color_parse("#9BC4E2")])
	liststore.append([_("284"),Gdk.color_parse("#75AADB")])
	liststore.append([_("285"),Gdk.color_parse("#3A75C4")])
	liststore.append([_("286"),Gdk.color_parse("#0038A8")])
	liststore.append([_("287"),Gdk.color_parse("#003893")])
	liststore.append([_("288"),Gdk.color_parse("#00337F")])
	liststore.append([_("289"),Gdk.color_parse("#002649")])
	liststore.append([_("290"),Gdk.color_parse("#C4D8E2")])
	liststore.append([_("2905"),Gdk.color_parse("#93C6E0")])
	liststore.append([_("291"),Gdk.color_parse("#A8CEE2")])
	liststore.append([_("2915"),Gdk.color_parse("#60AFDD")])
	liststore.append([_("292"),Gdk.color_parse("#75B2DD")])
	liststore.append([_("2925"),Gdk.color_parse("#008ED6")])
	liststore.append([_("293"),Gdk.color_parse("#0051BA")])
	liststore.append([_("2935"),Gdk.color_parse("#005BBF")])
	liststore.append([_("294"),Gdk.color_parse("#003F87")])
	liststore.append([_("2945"),Gdk.color_parse("#0054A0")])
	liststore.append([_("295"),Gdk.color_parse("#00386B")])
	liststore.append([_("2955"),Gdk.color_parse("#003D6B")])
	liststore.append([_("296"),Gdk.color_parse("#002D47")])
	liststore.append([_("2965"),Gdk.color_parse("#00334C")])
	liststore.append([_("297"),Gdk.color_parse("#82C6E2")])
	liststore.append([_("2975"),Gdk.color_parse("#BAE0E2")])
	liststore.append([_("298"),Gdk.color_parse("#51B5E0")])
	liststore.append([_("2985"),Gdk.color_parse("#51BFE2")])
	liststore.append([_("299"),Gdk.color_parse("#00A3DD")])
	liststore.append([_("299"),Gdk.color_parse("#007FCC")])
	liststore.append([_("2995"),Gdk.color_parse("#00A5DB")])
	liststore.append([_("300"),Gdk.color_parse("#0072C6")])
	liststore.append([_("3005"),Gdk.color_parse("#0084C9")])
	liststore.append([_("301"),Gdk.color_parse("#005B99")])
	liststore.append([_("3015"),Gdk.color_parse("#00709E")])
	liststore.append([_("302"),Gdk.color_parse("#004F6D")])
	liststore.append([_("3025"),Gdk.color_parse("#00546B")])
	liststore.append([_("303"),Gdk.color_parse("#003F54")])
	liststore.append([_("3035"),Gdk.color_parse("#004454")])
	liststore.append([_("304"),Gdk.color_parse("#A5DDE2")])
	liststore.append([_("305"),Gdk.color_parse("#70CEE2")])
	liststore.append([_("306"),Gdk.color_parse("#00BCE2")])
	liststore.append([_("306"),Gdk.color_parse("#00A3D1")])
	liststore.append([_("307"),Gdk.color_parse("#007AA5")])
	liststore.append([_("308"),Gdk.color_parse("#00607C")])
	liststore.append([_("309"),Gdk.color_parse("#003F49")])
	liststore.append([_("310"),Gdk.color_parse("#72D1DD")])
	liststore.append([_("3105"),Gdk.color_parse("#7FD6DB")])
	liststore.append([_("311"),Gdk.color_parse("#28C4D8")])
	liststore.append([_("3115"),Gdk.color_parse("#2DC6D6")])
	liststore.append([_("312"),Gdk.color_parse("#00ADC6")])
	liststore.append([_("3125"),Gdk.color_parse("#00B7C6")])
	liststore.append([_("313"),Gdk.color_parse("#0099B5")])
	liststore.append([_("3135"),Gdk.color_parse("#009BAA")])
	liststore.append([_("314"),Gdk.color_parse("#00829B")])
	liststore.append([_("3145"),Gdk.color_parse("#00848E")])
	liststore.append([_("315"),Gdk.color_parse("#006B77")])
	liststore.append([_("3155"),Gdk.color_parse("#006D75")])
	liststore.append([_("316"),Gdk.color_parse("#00494F")])
	liststore.append([_("3165"),Gdk.color_parse("#00565B")])
	liststore.append([_("317"),Gdk.color_parse("#C9E8DD")])
	liststore.append([_("318"),Gdk.color_parse("#93DDDB")])
	liststore.append([_("319"),Gdk.color_parse("#4CCED1")])
	liststore.append([_("320"),Gdk.color_parse("#009EA0")])
	liststore.append([_("320"),Gdk.color_parse("#007F82")])
	liststore.append([_("321"),Gdk.color_parse("#008789")])
	liststore.append([_("322"),Gdk.color_parse("#007272")])
	liststore.append([_("323"),Gdk.color_parse("#006663")])
	liststore.append([_("324"),Gdk.color_parse("#AADDD6")])
	liststore.append([_("3242"),Gdk.color_parse("#87DDD1")])
	liststore.append([_("3245"),Gdk.color_parse("#8CE0D1")])
	liststore.append([_("3248"),Gdk.color_parse("#7AD3C1")])
	liststore.append([_("325"),Gdk.color_parse("#56C9C1")])
	liststore.append([_("3252"),Gdk.color_parse("#56D6C9")])
	liststore.append([_("3255"),Gdk.color_parse("#47D6C1")])
	liststore.append([_("3258"),Gdk.color_parse("#35C4AF")])
	liststore.append([_("326"),Gdk.color_parse("#00B2AA")])
	liststore.append([_("3262"),Gdk.color_parse("#00C1B5")])
	liststore.append([_("3265"),Gdk.color_parse("#00C6B2")])
	liststore.append([_("3268"),Gdk.color_parse("#00AF99")])
	liststore.append([_("327"),Gdk.color_parse("#008C82")])
	liststore.append([_("327"),Gdk.color_parse("#008977")])
	liststore.append([_("3272"),Gdk.color_parse("#00AA9E")])
	liststore.append([_("3275"),Gdk.color_parse("#00B2A0")])
	liststore.append([_("3278"),Gdk.color_parse("#009B84")])
	liststore.append([_("328"),Gdk.color_parse("#007770")])
	liststore.append([_("3282"),Gdk.color_parse("#008C82")])
	liststore.append([_("3285"),Gdk.color_parse("#009987")])
	liststore.append([_("3288"),Gdk.color_parse("#008270")])
	liststore.append([_("329"),Gdk.color_parse("#006D66")])
	liststore.append([_("3292"),Gdk.color_parse("#006056")])
	liststore.append([_("3295"),Gdk.color_parse("#008272")])
	liststore.append([_("3298"),Gdk.color_parse("#006B5B")])
	liststore.append([_("330"),Gdk.color_parse("#005951")])
	liststore.append([_("3302"),Gdk.color_parse("#00493F")])
	liststore.append([_("3305"),Gdk.color_parse("#004F42")])
	liststore.append([_("3308"),Gdk.color_parse("#004438")])
	liststore.append([_("331"),Gdk.color_parse("#BAEAD6")])
	liststore.append([_("332"),Gdk.color_parse("#A0E5CE")])
	liststore.append([_("333"),Gdk.color_parse("#5EDDC1")])
	liststore.append([_("334"),Gdk.color_parse("#00997C")])
	liststore.append([_("335"),Gdk.color_parse("#007C66")])
	liststore.append([_("336"),Gdk.color_parse("#006854")])
	liststore.append([_("337"),Gdk.color_parse("#9BDBC1")])
	liststore.append([_("3375"),Gdk.color_parse("#8EE2BC")])
	liststore.append([_("338"),Gdk.color_parse("#7AD1B5")])
	liststore.append([_("3385"),Gdk.color_parse("#54D8A8")])
	liststore.append([_("339"),Gdk.color_parse("#00B28C")])
	liststore.append([_("3395"),Gdk.color_parse("#00C993")])
	liststore.append([_("340"),Gdk.color_parse("#009977")])
	liststore.append([_("3405"),Gdk.color_parse("#00B27A")])
	liststore.append([_("341"),Gdk.color_parse("#007A5E")])
	liststore.append([_("3415"),Gdk.color_parse("#007C59")])
	liststore.append([_("342"),Gdk.color_parse("#006B54")])
	liststore.append([_("3425"),Gdk.color_parse("#006847")])
	liststore.append([_("343"),Gdk.color_parse("#00563F")])
	liststore.append([_("3435"),Gdk.color_parse("#024930")])
	liststore.append([_("344"),Gdk.color_parse("#B5E2BF")])
	liststore.append([_("345"),Gdk.color_parse("#96D8AF")])
	liststore.append([_("346"),Gdk.color_parse("#70CE9B")])
	liststore.append([_("347"),Gdk.color_parse("#009E60")])
	liststore.append([_("348"),Gdk.color_parse("#008751")])
	liststore.append([_("349"),Gdk.color_parse("#006B3F")])
	liststore.append([_("350"),Gdk.color_parse("#234F33")])
	liststore.append([_("351"),Gdk.color_parse("#B5E8BF")])
	liststore.append([_("352"),Gdk.color_parse("#99E5B2")])
	liststore.append([_("353"),Gdk.color_parse("#84E2A8")])
	liststore.append([_("354"),Gdk.color_parse("#00B760")])
	liststore.append([_("355"),Gdk.color_parse("#009E49")])
	liststore.append([_("356"),Gdk.color_parse("#007A3D")])
	liststore.append([_("357"),Gdk.color_parse("#215B33")])
	liststore.append([_("358"),Gdk.color_parse("#AADD96")])
	liststore.append([_("359"),Gdk.color_parse("#A0DB8E")])
	liststore.append([_("360"),Gdk.color_parse("#60C659")])
	liststore.append([_("361"),Gdk.color_parse("#1EB53A")])
	liststore.append([_("362"),Gdk.color_parse("#339E35")])
	liststore.append([_("363"),Gdk.color_parse("#3D8E33")])
	liststore.append([_("364"),Gdk.color_parse("#3A7728")])
	liststore.append([_("365"),Gdk.color_parse("#D3E8A3")])
	liststore.append([_("366"),Gdk.color_parse("#C4E58E")])
	liststore.append([_("367"),Gdk.color_parse("#AADD6D")])
	liststore.append([_("368"),Gdk.color_parse("#5BBF21")])
	liststore.append([_("368"),Gdk.color_parse("#009E0F")])
	liststore.append([_("369"),Gdk.color_parse("#56AA1C")])
	liststore.append([_("370"),Gdk.color_parse("#568E14")])
	liststore.append([_("371"),Gdk.color_parse("#566B21")])
	liststore.append([_("372"),Gdk.color_parse("#D8ED96")])
	liststore.append([_("373"),Gdk.color_parse("#CEEA82")])
	liststore.append([_("374"),Gdk.color_parse("#BAE860")])
	liststore.append([_("375"),Gdk.color_parse("#8CD600")])
	liststore.append([_("375"),Gdk.color_parse("#54BC00")])
	liststore.append([_("376"),Gdk.color_parse("#7FBA00")])
	liststore.append([_("377"),Gdk.color_parse("#709302")])
	liststore.append([_("378"),Gdk.color_parse("#566314")])
	liststore.append([_("379"),Gdk.color_parse("#E0EA68")])
	liststore.append([_("380"),Gdk.color_parse("#D6E542")])
	liststore.append([_("381"),Gdk.color_parse("#CCE226")])
	liststore.append([_("382"),Gdk.color_parse("#BAD80A")])
	liststore.append([_("382"),Gdk.color_parse("#9EC400")])
	liststore.append([_("383"),Gdk.color_parse("#A3AF07")])
	liststore.append([_("384"),Gdk.color_parse("#939905")])
	liststore.append([_("385"),Gdk.color_parse("#707014")])
	liststore.append([_("386"),Gdk.color_parse("#E8ED60")])
	liststore.append([_("387"),Gdk.color_parse("#E0ED44")])
	liststore.append([_("388"),Gdk.color_parse("#D6E80F")])
	liststore.append([_("389"),Gdk.color_parse("#CEE007")])
	liststore.append([_("390"),Gdk.color_parse("#BAC405")])
	liststore.append([_("391"),Gdk.color_parse("#9E9E07")])
	liststore.append([_("392"),Gdk.color_parse("#848205")])
	liststore.append([_("393"),Gdk.color_parse("#F2EF87")])
	liststore.append([_("3935"),Gdk.color_parse("#F2ED6D")])
	liststore.append([_("394"),Gdk.color_parse("#EAED35")])
	liststore.append([_("3945"),Gdk.color_parse("#EFEA07")])
	liststore.append([_("395"),Gdk.color_parse("#E5E811")])
	liststore.append([_("3955"),Gdk.color_parse("#EDE211")])
	liststore.append([_("396"),Gdk.color_parse("#E0E20C")])
	liststore.append([_("3965"),Gdk.color_parse("#E8DD11")])
	liststore.append([_("397"),Gdk.color_parse("#C1BF0A")])
	liststore.append([_("3975"),Gdk.color_parse("#B5A80C")])
	liststore.append([_("398"),Gdk.color_parse("#AFA80A")])
	liststore.append([_("3985"),Gdk.color_parse("#998C0A")])
	liststore.append([_("399"),Gdk.color_parse("#998E07")])
	liststore.append([_("3995"),Gdk.color_parse("#6D6002")])
	liststore.append([_("400"),Gdk.color_parse("#D1C6B5")])
	liststore.append([_("401"),Gdk.color_parse("#C1B5A5")])
	liststore.append([_("402"),Gdk.color_parse("#AFA593")])
	liststore.append([_("403"),Gdk.color_parse("#998C7C")])
	liststore.append([_("404"),Gdk.color_parse("#827566")])
	liststore.append([_("405"),Gdk.color_parse("#6B5E4F")])
	liststore.append([_("406"),Gdk.color_parse("#CEC1B5")])
	liststore.append([_("408"),Gdk.color_parse("#A8998C")])
	liststore.append([_("409"),Gdk.color_parse("#99897C")])
	liststore.append([_("410"),Gdk.color_parse("#7C6D63")])
	liststore.append([_("411"),Gdk.color_parse("#66594C")])
	liststore.append([_("412"),Gdk.color_parse("#3D3028")])
	liststore.append([_("413"),Gdk.color_parse("#C6C1B2")])
	liststore.append([_("414"),Gdk.color_parse("#B5AFA0")])
	liststore.append([_("415"),Gdk.color_parse("#A39E8C")])
	liststore.append([_("416"),Gdk.color_parse("#8E8C7A")])
	liststore.append([_("417"),Gdk.color_parse("#777263")])
	liststore.append([_("418"),Gdk.color_parse("#605E4F")])
	liststore.append([_("419"),Gdk.color_parse("#282821")])
	liststore.append([_("420"),Gdk.color_parse("#D1CCBF")])
	liststore.append([_("421"),Gdk.color_parse("#BFBAAF")])
	liststore.append([_("422"),Gdk.color_parse("#AFAAA3")])
	liststore.append([_("423"),Gdk.color_parse("#96938E")])
	liststore.append([_("424"),Gdk.color_parse("#827F77")])
	liststore.append([_("425"),Gdk.color_parse("#60605B")])
	liststore.append([_("426"),Gdk.color_parse("#2B2B28")])
	liststore.append([_("427"),Gdk.color_parse("#DDDBD1")])
	liststore.append([_("428"),Gdk.color_parse("#D1CEC6")])
	liststore.append([_("429"),Gdk.color_parse("#ADAFAA")])
	liststore.append([_("430"),Gdk.color_parse("#919693")])
	liststore.append([_("431"),Gdk.color_parse("#666D70")])
	liststore.append([_("432"),Gdk.color_parse("#444F51")])
	liststore.append([_("433"),Gdk.color_parse("#30383A")])
	liststore.append([_("433"),Gdk.color_parse("#0A0C11")])
	liststore.append([_("434"),Gdk.color_parse("#E0D1C6")])
	liststore.append([_("435"),Gdk.color_parse("#D3BFB7")])
	liststore.append([_("436"),Gdk.color_parse("#BCA59E")])
	liststore.append([_("437"),Gdk.color_parse("#8C706B")])
	liststore.append([_("438"),Gdk.color_parse("#593F3D")])
	liststore.append([_("439"),Gdk.color_parse("#493533")])
	liststore.append([_("440"),Gdk.color_parse("#3F302B")])
	liststore.append([_("441"),Gdk.color_parse("#D1D1C6")])
	liststore.append([_("442"),Gdk.color_parse("#BABFB7")])
	liststore.append([_("443"),Gdk.color_parse("#A3A8A3")])
	liststore.append([_("444"),Gdk.color_parse("#898E8C")])
	liststore.append([_("445"),Gdk.color_parse("#565959")])
	liststore.append([_("446"),Gdk.color_parse("#494C49")])
	liststore.append([_("447"),Gdk.color_parse("#3F3F38")])
	liststore.append([_("448"),Gdk.color_parse("#54472D")])
	liststore.append([_("4485"),Gdk.color_parse("#604C11")])
	liststore.append([_("449"),Gdk.color_parse("#544726")])
	liststore.append([_("4495"),Gdk.color_parse("#877530")])
	liststore.append([_("450"),Gdk.color_parse("#60542B")])
	liststore.append([_("4505"),Gdk.color_parse("#A09151")])
	liststore.append([_("451"),Gdk.color_parse("#ADA07A")])
	liststore.append([_("4515"),Gdk.color_parse("#BCAD75")])
	liststore.append([_("452"),Gdk.color_parse("#C4B796")])
	liststore.append([_("452"),Gdk.color_parse("#009944")])
	liststore.append([_("4525"),Gdk.color_parse("#CCBF8E")])
	liststore.append([_("453"),Gdk.color_parse("#D6CCAF")])
	liststore.append([_("4535"),Gdk.color_parse("#DBCEA5")])
	liststore.append([_("454"),Gdk.color_parse("#E2D8BF")])
	liststore.append([_("4545"),Gdk.color_parse("#E5DBBA")])
	liststore.append([_("455"),Gdk.color_parse("#665614")])
	liststore.append([_("456"),Gdk.color_parse("#998714")])
	liststore.append([_("457"),Gdk.color_parse("#B59B0C")])
	liststore.append([_("458"),Gdk.color_parse("#DDCC6B")])
	liststore.append([_("459"),Gdk.color_parse("#E2D67C")])
	liststore.append([_("460"),Gdk.color_parse("#EADD96")])
	liststore.append([_("461"),Gdk.color_parse("#EDE5AD")])
	liststore.append([_("462"),Gdk.color_parse("#5B4723")])
	liststore.append([_("4625"),Gdk.color_parse("#472311")])
	liststore.append([_("463"),Gdk.color_parse("#755426")])
	liststore.append([_("4635"),Gdk.color_parse("#8C5933")])
	liststore.append([_("464"),Gdk.color_parse("#876028")])
	liststore.append([_("464"),Gdk.color_parse("#704214")])
	liststore.append([_("4645"),Gdk.color_parse("#B28260")])
	liststore.append([_("465"),Gdk.color_parse("#C1A875")])
	liststore.append([_("4655"),Gdk.color_parse("#C49977")])
	liststore.append([_("466"),Gdk.color_parse("#D1BF91")])
	liststore.append([_("4665"),Gdk.color_parse("#D8B596")])
	liststore.append([_("467"),Gdk.color_parse("#DDCCA5")])
	liststore.append([_("4675"),Gdk.color_parse("#E5C6AA")])
	liststore.append([_("468"),Gdk.color_parse("#E2D6B5")])
	liststore.append([_("4685"),Gdk.color_parse("#EDD3BC")])
	liststore.append([_("469"),Gdk.color_parse("#603311")])
	liststore.append([_("4695"),Gdk.color_parse("#51261C")])
	liststore.append([_("470"),Gdk.color_parse("#9B4F19")])
	liststore.append([_("4705"),Gdk.color_parse("#7C513D")])
	liststore.append([_("471"),Gdk.color_parse("#BC5E1E")])
	liststore.append([_("471"),Gdk.color_parse("#A34402")])
	liststore.append([_("4715"),Gdk.color_parse("#99705B")])
	liststore.append([_("472"),Gdk.color_parse("#EAAA7A")])
	liststore.append([_("4725"),Gdk.color_parse("#B5917C")])
	liststore.append([_("473"),Gdk.color_parse("#F4C4A0")])
	liststore.append([_("4735"),Gdk.color_parse("#CCAF9B")])
	liststore.append([_("474"),Gdk.color_parse("#F4CCAA")])
	liststore.append([_("4745"),Gdk.color_parse("#D8BFAA")])
	liststore.append([_("475"),Gdk.color_parse("#F7D3B5")])
	liststore.append([_("4755"),Gdk.color_parse("#E2CCBA")])
	liststore.append([_("476"),Gdk.color_parse("#593D2B")])
	liststore.append([_("477"),Gdk.color_parse("#633826")])
	liststore.append([_("478"),Gdk.color_parse("#7A3F28")])
	liststore.append([_("479"),Gdk.color_parse("#AF8970")])
	liststore.append([_("480"),Gdk.color_parse("#D3B7A3")])
	liststore.append([_("481"),Gdk.color_parse("#E0CCBA")])
	liststore.append([_("482"),Gdk.color_parse("#E5D3C1")])
	liststore.append([_("483"),Gdk.color_parse("#6B3021")])
	liststore.append([_("484"),Gdk.color_parse("#9B301C")])
	liststore.append([_("485"),Gdk.color_parse("#D81E05")])
	liststore.append([_("485"),Gdk.color_parse("#CC0C00")])
	liststore.append([_("486"),Gdk.color_parse("#ED9E84")])
	liststore.append([_("487"),Gdk.color_parse("#EFB5A0")])
	liststore.append([_("488"),Gdk.color_parse("#F2C4AF")])
	liststore.append([_("489"),Gdk.color_parse("#F2D1BF")])
	liststore.append([_("490"),Gdk.color_parse("#5B2626")])
	liststore.append([_("491"),Gdk.color_parse("#752828")])
	liststore.append([_("492"),Gdk.color_parse("#913338")])
	liststore.append([_("494"),Gdk.color_parse("#F2ADB2")])
	liststore.append([_("495"),Gdk.color_parse("#F4BCBF")])
	liststore.append([_("496"),Gdk.color_parse("#F7C9C6")])
	liststore.append([_("497"),Gdk.color_parse("#512826")])
	liststore.append([_("4975"),Gdk.color_parse("#441E1C")])
	liststore.append([_("498"),Gdk.color_parse("#6D332B")])
	liststore.append([_("4985"),Gdk.color_parse("#844949")])
	liststore.append([_("499"),Gdk.color_parse("#7A382D")])
	liststore.append([_("4995"),Gdk.color_parse("#A56B6D")])
	liststore.append([_("500"),Gdk.color_parse("#CE898C")])
	liststore.append([_("5005"),Gdk.color_parse("#BC8787")])
	liststore.append([_("501"),Gdk.color_parse("#EAB2B2")])
	liststore.append([_("5015"),Gdk.color_parse("#D8ADA8")])
	liststore.append([_("502"),Gdk.color_parse("#F2C6C4")])
	liststore.append([_("5025"),Gdk.color_parse("#E2BCB7")])
	liststore.append([_("503"),Gdk.color_parse("#F4D1CC")])
	liststore.append([_("5035"),Gdk.color_parse("#EDCEC6")])
	liststore.append([_("504"),Gdk.color_parse("#511E26")])
	liststore.append([_("505"),Gdk.color_parse("#661E2B")])
	liststore.append([_("506"),Gdk.color_parse("#7A2638")])
	liststore.append([_("507"),Gdk.color_parse("#D8899B")])
	liststore.append([_("508"),Gdk.color_parse("#E8A5AF")])
	liststore.append([_("509"),Gdk.color_parse("#F2BABF")])
	liststore.append([_("510"),Gdk.color_parse("#F4C6C9")])
	liststore.append([_("511"),Gdk.color_parse("#602144")])
	liststore.append([_("5115"),Gdk.color_parse("#4F213A")])
	liststore.append([_("512"),Gdk.color_parse("#84216B")])
	liststore.append([_("5125"),Gdk.color_parse("#754760")])
	liststore.append([_("513"),Gdk.color_parse("#9E2387")])
	liststore.append([_("5135"),Gdk.color_parse("#936B7F")])
	liststore.append([_("514"),Gdk.color_parse("#D884BC")])
	liststore.append([_("5145"),Gdk.color_parse("#AD8799")])
	liststore.append([_("515"),Gdk.color_parse("#E8A3C9")])
	liststore.append([_("5155"),Gdk.color_parse("#CCAFB7")])
	liststore.append([_("516"),Gdk.color_parse("#F2BAD3")])
	liststore.append([_("5165"),Gdk.color_parse("#E0C9CC")])
	liststore.append([_("517"),Gdk.color_parse("#F4CCD8")])
	liststore.append([_("5175"),Gdk.color_parse("#E8D6D1")])
	liststore.append([_("518"),Gdk.color_parse("#512D44")])
	liststore.append([_("5185"),Gdk.color_parse("#472835")])
	liststore.append([_("519"),Gdk.color_parse("#63305E")])
	liststore.append([_("5195"),Gdk.color_parse("#593344")])
	liststore.append([_("520"),Gdk.color_parse("#703572")])
	liststore.append([_("5205"),Gdk.color_parse("#8E6877")])
	liststore.append([_("521"),Gdk.color_parse("#B58CB2")])
	liststore.append([_("5215"),Gdk.color_parse("#B5939B")])
	liststore.append([_("522"),Gdk.color_parse("#C6A3C1")])
	liststore.append([_("5225"),Gdk.color_parse("#CCADAF")])
	liststore.append([_("523"),Gdk.color_parse("#D3B7CC")])
	liststore.append([_("5235"),Gdk.color_parse("#DDC6C4")])
	liststore.append([_("524"),Gdk.color_parse("#E2CCD3")])
	liststore.append([_("5245"),Gdk.color_parse("#E5D3CC")])
	liststore.append([_("525"),Gdk.color_parse("#512654")])
	liststore.append([_("5255"),Gdk.color_parse("#35264F")])
	liststore.append([_("526"),Gdk.color_parse("#68217A")])
	liststore.append([_("5265"),Gdk.color_parse("#493D63")])
	liststore.append([_("527"),Gdk.color_parse("#7A1E99")])
	liststore.append([_("5275"),Gdk.color_parse("#605677")])
	liststore.append([_("528"),Gdk.color_parse("#AF72C1")])
	liststore.append([_("5285"),Gdk.color_parse("#8C8299")])
	liststore.append([_("529"),Gdk.color_parse("#CEA3D3")])
	liststore.append([_("5295"),Gdk.color_parse("#B2A8B5")])
	liststore.append([_("530"),Gdk.color_parse("#D6AFD6")])
	liststore.append([_("5305"),Gdk.color_parse("#CCC1C6")])
	liststore.append([_("531"),Gdk.color_parse("#E5C6DB")])
	liststore.append([_("5315"),Gdk.color_parse("#DBD3D3")])
	liststore.append([_("532"),Gdk.color_parse("#353842")])
	liststore.append([_("533"),Gdk.color_parse("#353F5B")])
	liststore.append([_("534"),Gdk.color_parse("#3A4972")])
	liststore.append([_("535"),Gdk.color_parse("#9BA3B7")])
	liststore.append([_("536"),Gdk.color_parse("#ADB2C1")])
	liststore.append([_("537"),Gdk.color_parse("#C4C6CE")])
	liststore.append([_("538"),Gdk.color_parse("#D6D3D6")])
	liststore.append([_("539"),Gdk.color_parse("#003049")])
	liststore.append([_("5395"),Gdk.color_parse("#02283A")])
	liststore.append([_("540"),Gdk.color_parse("#00335B")])
	liststore.append([_("5405"),Gdk.color_parse("#3F6075")])
	liststore.append([_("541"),Gdk.color_parse("#003F77")])
	liststore.append([_("5415"),Gdk.color_parse("#607C8C")])
	liststore.append([_("542"),Gdk.color_parse("#6693BC")])
	liststore.append([_("5425"),Gdk.color_parse("#8499A5")])
	liststore.append([_("543"),Gdk.color_parse("#93B7D1")])
	liststore.append([_("5435"),Gdk.color_parse("#AFBCBF")])
	liststore.append([_("544"),Gdk.color_parse("#B7CCDB")])
	liststore.append([_("5445"),Gdk.color_parse("#C4CCCC")])
	liststore.append([_("545"),Gdk.color_parse("#C4D3DD")])
	liststore.append([_("5455"),Gdk.color_parse("#D6D8D3")])
	liststore.append([_("546"),Gdk.color_parse("#0C3844")])
	liststore.append([_("5463"),Gdk.color_parse("#00353A")])
	liststore.append([_("5467"),Gdk.color_parse("#193833")])
	liststore.append([_("547"),Gdk.color_parse("#003F54")])
	liststore.append([_("5473"),Gdk.color_parse("#26686D")])
	liststore.append([_("5477"),Gdk.color_parse("#3A564F")])
	liststore.append([_("548"),Gdk.color_parse("#004459")])
	liststore.append([_("5483"),Gdk.color_parse("#609191")])
	liststore.append([_("5487"),Gdk.color_parse("#667C72")])
	liststore.append([_("549"),Gdk.color_parse("#5E99AA")])
	liststore.append([_("5493"),Gdk.color_parse("#8CAFAD")])
	liststore.append([_("5497"),Gdk.color_parse("#91A399")])
	liststore.append([_("550"),Gdk.color_parse("#87AFBF")])
	liststore.append([_("5503"),Gdk.color_parse("#AAC4BF")])
	liststore.append([_("5507"),Gdk.color_parse("#AFBAB2")])
	liststore.append([_("551"),Gdk.color_parse("#A3C1C9")])
	liststore.append([_("5513"),Gdk.color_parse("#CED8D1")])
	liststore.append([_("5517"),Gdk.color_parse("#C9CEC4")])
	liststore.append([_("552"),Gdk.color_parse("#C4D6D6")])
	liststore.append([_("5523"),Gdk.color_parse("#D6DDD6")])
	liststore.append([_("5527"),Gdk.color_parse("#CED1C6")])
	liststore.append([_("553"),Gdk.color_parse("#234435")])
	liststore.append([_("5535"),Gdk.color_parse("#213D30")])
	liststore.append([_("554"),Gdk.color_parse("#195E47")])
	liststore.append([_("5545"),Gdk.color_parse("#4F6D5E")])
	liststore.append([_("555"),Gdk.color_parse("#076D54")])
	liststore.append([_("5555"),Gdk.color_parse("#779182")])
	liststore.append([_("556"),Gdk.color_parse("#7AA891")])
	liststore.append([_("5565"),Gdk.color_parse("#96AA99")])
	liststore.append([_("557"),Gdk.color_parse("#A3C1AD")])
	liststore.append([_("5575"),Gdk.color_parse("#AFBFAD")])
	liststore.append([_("558"),Gdk.color_parse("#B7CEBC")])
	liststore.append([_("5585"),Gdk.color_parse("#C4CEBF")])
	liststore.append([_("559"),Gdk.color_parse("#C6D6C4")])
	liststore.append([_("5595"),Gdk.color_parse("#D8DBCC")])
	liststore.append([_("560"),Gdk.color_parse("#2B4C3F")])
	liststore.append([_("5605"),Gdk.color_parse("#233A2D")])
	liststore.append([_("561"),Gdk.color_parse("#266659")])
	liststore.append([_("5615"),Gdk.color_parse("#546856")])
	liststore.append([_("562"),Gdk.color_parse("#1E7A6D")])
	liststore.append([_("5625"),Gdk.color_parse("#728470")])
	liststore.append([_("563"),Gdk.color_parse("#7FBCAA")])
	liststore.append([_("5635"),Gdk.color_parse("#9EAA99")])
	liststore.append([_("564"),Gdk.color_parse("#05705E")])
	liststore.append([_("5645"),Gdk.color_parse("#BCC1B2")])
	liststore.append([_("565"),Gdk.color_parse("#BCDBCC")])
	liststore.append([_("5655"),Gdk.color_parse("#C6CCBA")])
	liststore.append([_("566"),Gdk.color_parse("#D1E2D3")])
	liststore.append([_("5665"),Gdk.color_parse("#D6D6C6")])
	liststore.append([_("567"),Gdk.color_parse("#265142")])
	liststore.append([_("569"),Gdk.color_parse("#008772")])
	liststore.append([_("570"),Gdk.color_parse("#7FC6B2")])
	liststore.append([_("571"),Gdk.color_parse("#AADBC6")])
	liststore.append([_("572"),Gdk.color_parse("#BCE2CE")])
	liststore.append([_("573"),Gdk.color_parse("#CCE5D6")])
	liststore.append([_("574"),Gdk.color_parse("#495928")])
	liststore.append([_("5743"),Gdk.color_parse("#3F4926")])
	liststore.append([_("5747"),Gdk.color_parse("#424716")])
	liststore.append([_("575"),Gdk.color_parse("#547730")])
	liststore.append([_("5753"),Gdk.color_parse("#5E663A")])
	liststore.append([_("5757"),Gdk.color_parse("#6B702B")])
	liststore.append([_("576"),Gdk.color_parse("#608E3A")])
	liststore.append([_("5763"),Gdk.color_parse("#777C4F")])
	liststore.append([_("5767"),Gdk.color_parse("#8C914F")])
	liststore.append([_("577"),Gdk.color_parse("#B5CC8E")])
	liststore.append([_("5773"),Gdk.color_parse("#9B9E72")])
	liststore.append([_("5777"),Gdk.color_parse("#AAAD75")])
	liststore.append([_("578"),Gdk.color_parse("#C6D6A0")])
	liststore.append([_("5783"),Gdk.color_parse("#B5B58E")])
	liststore.append([_("5787"),Gdk.color_parse("#C6C699")])
	liststore.append([_("579"),Gdk.color_parse("#C9D6A3")])
	liststore.append([_("5793"),Gdk.color_parse("#C6C6A5")])
	liststore.append([_("5797"),Gdk.color_parse("#D3D1AA")])
	liststore.append([_("580"),Gdk.color_parse("#D8DDB5")])
	liststore.append([_("5803"),Gdk.color_parse("#D8D6B7")])
	liststore.append([_("5807"),Gdk.color_parse("#E0DDBC")])
	liststore.append([_("581"),Gdk.color_parse("#605E11")])
	liststore.append([_("5815"),Gdk.color_parse("#494411")])
	liststore.append([_("582"),Gdk.color_parse("#878905")])
	liststore.append([_("5825"),Gdk.color_parse("#75702B")])
	liststore.append([_("583"),Gdk.color_parse("#AABA0A")])
	liststore.append([_("5835"),Gdk.color_parse("#9E9959")])
	liststore.append([_("584"),Gdk.color_parse("#CED649")])
	liststore.append([_("5845"),Gdk.color_parse("#B2AA70")])
	liststore.append([_("585"),Gdk.color_parse("#DBE06B")])
	liststore.append([_("5855"),Gdk.color_parse("#CCC693")])
	liststore.append([_("586"),Gdk.color_parse("#E2E584")])
	liststore.append([_("5865"),Gdk.color_parse("#D6CEA3")])
	liststore.append([_("587"),Gdk.color_parse("#E8E89B")])
	liststore.append([_("5875"),Gdk.color_parse("#E0DBB5")])
	liststore.append([_("600"),Gdk.color_parse("#F4EDAF")])
	liststore.append([_("601"),Gdk.color_parse("#F2ED9E")])
	liststore.append([_("602"),Gdk.color_parse("#F2EA87")])
	liststore.append([_("603"),Gdk.color_parse("#EDE85B")])
	liststore.append([_("604"),Gdk.color_parse("#E8DD21")])
	liststore.append([_("605"),Gdk.color_parse("#DDCE11")])
	liststore.append([_("606"),Gdk.color_parse("#D3BF11")])
	liststore.append([_("607"),Gdk.color_parse("#F2EABC")])
	liststore.append([_("608"),Gdk.color_parse("#EFE8AD")])
	liststore.append([_("609"),Gdk.color_parse("#EAE596")])
	liststore.append([_("610"),Gdk.color_parse("#E2DB72")])
	liststore.append([_("611"),Gdk.color_parse("#D6CE49")])
	liststore.append([_("612"),Gdk.color_parse("#C4BA00")])
	liststore.append([_("613"),Gdk.color_parse("#AFA00C")])
	liststore.append([_("614"),Gdk.color_parse("#EAE2B7")])
	liststore.append([_("615"),Gdk.color_parse("#E2DBAA")])
	liststore.append([_("616"),Gdk.color_parse("#DDD69B")])
	liststore.append([_("617"),Gdk.color_parse("#CCC47C")])
	liststore.append([_("618"),Gdk.color_parse("#B5AA59")])
	liststore.append([_("619"),Gdk.color_parse("#968C28")])
	liststore.append([_("620"),Gdk.color_parse("#847711")])
	liststore.append([_("621"),Gdk.color_parse("#D8DDCE")])
	liststore.append([_("622"),Gdk.color_parse("#C1D1BF")])
	liststore.append([_("623"),Gdk.color_parse("#A5BFAA")])
	liststore.append([_("624"),Gdk.color_parse("#7FA08C")])
	liststore.append([_("625"),Gdk.color_parse("#5B8772")])
	liststore.append([_("626"),Gdk.color_parse("#21543F")])
	liststore.append([_("627"),Gdk.color_parse("#0C3026")])
	liststore.append([_("628"),Gdk.color_parse("#CCE2DD")])
	liststore.append([_("629"),Gdk.color_parse("#B2D8D8")])
	liststore.append([_("630"),Gdk.color_parse("#8CCCD3")])
	liststore.append([_("631"),Gdk.color_parse("#54B7C6")])
	liststore.append([_("632"),Gdk.color_parse("#00A0BA")])
	liststore.append([_("633"),Gdk.color_parse("#007F99")])
	liststore.append([_("634"),Gdk.color_parse("#00667F")])
	liststore.append([_("635"),Gdk.color_parse("#BAE0E0")])
	liststore.append([_("636"),Gdk.color_parse("#99D6DD")])
	liststore.append([_("637"),Gdk.color_parse("#6BC9DB")])
	liststore.append([_("638"),Gdk.color_parse("#00B5D6")])
	liststore.append([_("639"),Gdk.color_parse("#00A0C4")])
	liststore.append([_("640"),Gdk.color_parse("#008CB2")])
	liststore.append([_("641"),Gdk.color_parse("#007AA5")])
	liststore.append([_("642"),Gdk.color_parse("#D1D8D8")])
	liststore.append([_("643"),Gdk.color_parse("#C6D1D6")])
	liststore.append([_("644"),Gdk.color_parse("#9BAFC4")])
	liststore.append([_("645"),Gdk.color_parse("#7796B2")])
	liststore.append([_("646"),Gdk.color_parse("#5E82A3")])
	liststore.append([_("647"),Gdk.color_parse("#26547C")])
	liststore.append([_("648"),Gdk.color_parse("#00305E")])
	liststore.append([_("649"),Gdk.color_parse("#D6D6D8")])
	liststore.append([_("650"),Gdk.color_parse("#BFC6D1")])
	liststore.append([_("651"),Gdk.color_parse("#9BAABF")])
	liststore.append([_("652"),Gdk.color_parse("#6D87A8")])
	liststore.append([_("653"),Gdk.color_parse("#335687")])
	liststore.append([_("654"),Gdk.color_parse("#0F2B5B")])
	liststore.append([_("655"),Gdk.color_parse("#0C1C47")])
	liststore.append([_("656"),Gdk.color_parse("#D6DBE0")])
	liststore.append([_("657"),Gdk.color_parse("#C1C9DD")])
	liststore.append([_("658"),Gdk.color_parse("#A5AFD6")])
	liststore.append([_("659"),Gdk.color_parse("#7F8CBF")])
	liststore.append([_("660"),Gdk.color_parse("#5960A8")])
	liststore.append([_("661"),Gdk.color_parse("#2D338E")])
	liststore.append([_("662"),Gdk.color_parse("#0C1975")])
	liststore.append([_("663"),Gdk.color_parse("#E2D3D6")])
	liststore.append([_("664"),Gdk.color_parse("#D8CCD1")])
	liststore.append([_("665"),Gdk.color_parse("#C6B5C4")])
	liststore.append([_("666"),Gdk.color_parse("#A893AD")])
	liststore.append([_("667"),Gdk.color_parse("#7F6689")])
	liststore.append([_("668"),Gdk.color_parse("#664975")])
	liststore.append([_("669"),Gdk.color_parse("#472B59")])
	liststore.append([_("670"),Gdk.color_parse("#F2D6D8")])
	liststore.append([_("671"),Gdk.color_parse("#EFC6D3")])
	liststore.append([_("672"),Gdk.color_parse("#EAAAC4")])
	liststore.append([_("673"),Gdk.color_parse("#E08CB2")])
	liststore.append([_("674"),Gdk.color_parse("#D36B9E")])
	liststore.append([_("675"),Gdk.color_parse("#BC3877")])
	liststore.append([_("676"),Gdk.color_parse("#A00054")])
	liststore.append([_("677"),Gdk.color_parse("#EDD6D6")])
	liststore.append([_("678"),Gdk.color_parse("#EACCCE")])
	liststore.append([_("679"),Gdk.color_parse("#E5BFC6")])
	liststore.append([_("680"),Gdk.color_parse("#D39EAF")])
	liststore.append([_("681"),Gdk.color_parse("#B7728E")])
	liststore.append([_("682"),Gdk.color_parse("#A05175")])
	liststore.append([_("683"),Gdk.color_parse("#7F284F")])
	liststore.append([_("684"),Gdk.color_parse("#EFCCCE")])
	liststore.append([_("685"),Gdk.color_parse("#EABFC4")])
	liststore.append([_("686"),Gdk.color_parse("#E0AABA")])
	liststore.append([_("687"),Gdk.color_parse("#C9899E")])
	liststore.append([_("688"),Gdk.color_parse("#B26684")])
	liststore.append([_("689"),Gdk.color_parse("#934266")])
	liststore.append([_("690"),Gdk.color_parse("#702342")])
	liststore.append([_("691"),Gdk.color_parse("#EFD1C9")])
	liststore.append([_("692"),Gdk.color_parse("#E8BFBA")])
	liststore.append([_("693"),Gdk.color_parse("#DBA8A5")])
	liststore.append([_("694"),Gdk.color_parse("#C98C8C")])
	liststore.append([_("695"),Gdk.color_parse("#B26B70")])
	liststore.append([_("696"),Gdk.color_parse("#8E4749")])
	liststore.append([_("697"),Gdk.color_parse("#7F383A")])
	liststore.append([_("698"),Gdk.color_parse("#F7D1CC")])
	liststore.append([_("699"),Gdk.color_parse("#F7BFBF")])
	liststore.append([_("700"),Gdk.color_parse("#F2A5AA")])
	liststore.append([_("701"),Gdk.color_parse("#E8878E")])
	liststore.append([_("702"),Gdk.color_parse("#D6606D")])
	liststore.append([_("703"),Gdk.color_parse("#B73844")])
	liststore.append([_("704"),Gdk.color_parse("#9E2828")])
	liststore.append([_("705"),Gdk.color_parse("#F9DDD6")])
	liststore.append([_("706"),Gdk.color_parse("#FCC9C6")])
	liststore.append([_("707"),Gdk.color_parse("#FCADAF")])
	liststore.append([_("708"),Gdk.color_parse("#F98E99")])
	liststore.append([_("709"),Gdk.color_parse("#F26877")])
	liststore.append([_("710"),Gdk.color_parse("#E04251")])
	liststore.append([_("711"),Gdk.color_parse("#D12D33")])
	liststore.append([_("712"),Gdk.color_parse("#FFD3AA")])
	liststore.append([_("713"),Gdk.color_parse("#F9C9A3")])
	liststore.append([_("714"),Gdk.color_parse("#F9BA82")])
	liststore.append([_("715"),Gdk.color_parse("#FC9E49")])
	liststore.append([_("716"),Gdk.color_parse("#F28411")])
	liststore.append([_("717"),Gdk.color_parse("#D36D00")])
	liststore.append([_("718"),Gdk.color_parse("#BF5B00")])
	liststore.append([_("719"),Gdk.color_parse("#F4D1AF")])
	liststore.append([_("720"),Gdk.color_parse("#EFC49E")])
	liststore.append([_("721"),Gdk.color_parse("#E8B282")])
	liststore.append([_("722"),Gdk.color_parse("#D18E54")])
	liststore.append([_("723"),Gdk.color_parse("#BA7530")])
	liststore.append([_("724"),Gdk.color_parse("#8E4905")])
	liststore.append([_("725"),Gdk.color_parse("#753802")])
	liststore.append([_("726"),Gdk.color_parse("#EDD3B5")])
	liststore.append([_("727"),Gdk.color_parse("#E2BF9B")])
	liststore.append([_("728"),Gdk.color_parse("#D3A87C")])
	liststore.append([_("729"),Gdk.color_parse("#C18E60")])
	liststore.append([_("730"),Gdk.color_parse("#AA753F")])
	liststore.append([_("731"),Gdk.color_parse("#723F0A")])
	liststore.append([_("732"),Gdk.color_parse("#60330A")])
	liststore.append([_("801"),Gdk.color_parse("#00AACC")])
	liststore.append([_("801"),Gdk.color_parse("#0089AF")])
	liststore.append([_("802"),Gdk.color_parse("#60DD49")])
	liststore.append([_("802"),Gdk.color_parse("#1CCE28")])
	liststore.append([_("803"),Gdk.color_parse("#FFED38")])
	liststore.append([_("803"),Gdk.color_parse("#FFD816")])
	liststore.append([_("804"),Gdk.color_parse("#FF9338")])
	liststore.append([_("804"),Gdk.color_parse("#FF7F1E")])
	liststore.append([_("805"),Gdk.color_parse("#F95951")])
	liststore.append([_("805"),Gdk.color_parse("#F93A2B")])
	liststore.append([_("806"),Gdk.color_parse("#FF0093")])
	liststore.append([_("806"),Gdk.color_parse("#F7027C")])
	liststore.append([_("807"),Gdk.color_parse("#D6009E")])
	liststore.append([_("807"),Gdk.color_parse("#BF008C")])
	liststore.append([_("808"),Gdk.color_parse("#00B59B")])
	liststore.append([_("808"),Gdk.color_parse("#00A087")])
	liststore.append([_("809"),Gdk.color_parse("#DDE00F")])
	liststore.append([_("809"),Gdk.color_parse("#D6D60C")])
	liststore.append([_("810"),Gdk.color_parse("#FFCC1E")])
	liststore.append([_("810"),Gdk.color_parse("#FFBC21")])
	liststore.append([_("811"),Gdk.color_parse("#FF7247")])
	liststore.append([_("811"),Gdk.color_parse("#FF5416")])
	liststore.append([_("812"),Gdk.color_parse("#FC2366")])
	liststore.append([_("812"),Gdk.color_parse("#FC074F")])
	liststore.append([_("813"),Gdk.color_parse("#E50099")])
	liststore.append([_("813"),Gdk.color_parse("#D10084")])
	liststore.append([_("814"),Gdk.color_parse("#8C60C1")])
	liststore.append([_("814"),Gdk.color_parse("#703FAF")])
	return liststore
	
def get_ral_colors():
	liststore = Gtk.ListStore(str, str)
	liststore.append([_("1000"),"#CCC188"])
	liststore.append([_("1001"),"#CEB487"])
	liststore.append([_("1002"),"#D0B173"])
	liststore.append([_("1003"),"#F2AD00"])
	liststore.append([_("1004"),"#E4A700"])
	liststore.append([_("1005"),"#C79600"])
	liststore.append([_("1006"),"#D99300"])
	liststore.append([_("1007"),"#E69400"])
	liststore.append([_("1011"),"#AF8552"])
	liststore.append([_("1012"),"#D8BA2E"])
	liststore.append([_("1013"),"#E5DFCC"])
	liststore.append([_("1014"),"#DFCEA1"])
	liststore.append([_("1015"),"#E6D9BD"])
	liststore.append([_("1016"),"#ECEA41"])
	liststore.append([_("1017"),"#F6B256"])
	liststore.append([_("1018"),"#FDDA38"])
	liststore.append([_("1019"),"#A6937B"])
	liststore.append([_("1020"),"#A09465"])
	liststore.append([_("1021"),"#F2C000"])
	liststore.append([_("1023"),"#F2BF00"])
	liststore.append([_("1024"),"#B89650"])
	liststore.append([_("1027"),"#A4861A"])
	liststore.append([_("1028"),"#FFA600"])
	liststore.append([_("1032"),"#E2AC00"])
	liststore.append([_("1033"),"#F7A11F"])
	liststore.append([_("1034"),"#EBA557"])
	liststore.append([_("1037"),"#EBA557"])
	liststore.append([_("2000"),"#D97604"])
	liststore.append([_("2001"),"#BB4926"])
	liststore.append([_("2002"),"#C13524"])
	liststore.append([_("2003"),"#F97A31"])
	liststore.append([_("2004"),"#E8540D"])
	liststore.append([_("2008"),"#F46F29"])
	liststore.append([_("2009"),"#DB5316"])
	liststore.append([_("2010"),"#D55D23"])
	liststore.append([_("2011"),"#EA7625"])
	liststore.append([_("2012"),"#D6654E"])
	liststore.append([_("3000"),"#A02725"])
	liststore.append([_("3001"),"#A0001C"])
	liststore.append([_("3002"),"#991424"])
	liststore.append([_("3003"),"#870A24"])
	liststore.append([_("3004"),"#6C1B2A"])
	liststore.append([_("3005"),"#581E29"])
	liststore.append([_("3007"),"#402226"])
	liststore.append([_("3009"),"#6D312B"])
	liststore.append([_("3011"),"#791F24"])
	liststore.append([_("3012"),"#C68873"])
	liststore.append([_("3013"),"#992A28"])
	liststore.append([_("3014"),"#CF7278"])
	liststore.append([_("3015"),"#E3A0AC"])
	liststore.append([_("3016"),"#AB392D"])
	liststore.append([_("3017"),"#CC515E"])
	liststore.append([_("3018"),"#CA3F51"])
	liststore.append([_("3020"),"#BF111B"])
	liststore.append([_("3022"),"#D36B56"])
	liststore.append([_("3027"),"#B01D42"])
	liststore.append([_("3031"),"#A7323E"])
	liststore.append([_("4001"),"#865D86"])
	liststore.append([_("4002"),"#8F3F51"])
	liststore.append([_("4003"),"#CA5B91"])
	liststore.append([_("4004"),"#69193B"])
	liststore.append([_("4005"),"#7E63A1"])
	liststore.append([_("4006"),"#912D76"])
	liststore.append([_("4007"),"#48233E"])
	liststore.append([_("4008"),"#853D7D"])
	liststore.append([_("4009"),"#9D8493"])
	liststore.append([_("5000"),"#2F4A71"])
	liststore.append([_("5001"),"#0E4666"])
	liststore.append([_("5002"),"#162E7B"])
	liststore.append([_("5003"),"#193058"])
	liststore.append([_("5004"),"#1A1D2A"])
	liststore.append([_("5005"),"#004389"])
	liststore.append([_("5007"),"#38618C"])
	liststore.append([_("5008"),"#2D3944"])
	liststore.append([_("5009"),"#245878"])
	liststore.append([_("5010"),"#00427F"])
	liststore.append([_("5011"),"#1A2740"])
	liststore.append([_("5012"),"#2781BB"])
	liststore.append([_("5013"),"#202E53"])
	liststore.append([_("5014"),"#667B9A"])
	liststore.append([_("5015"),"#0071B5"])
	liststore.append([_("5017"),"#004C91"])
	liststore.append([_("5018"),"#138992"])
	liststore.append([_("5019"),"#005688"])
	liststore.append([_("5020"),"#00747D"])
	liststore.append([_("5021"),"#00747D"])
	liststore.append([_("5022"),"#28275A"])
	liststore.append([_("5023"),"#486591"])
	liststore.append([_("5024"),"#6391B0"])
	liststore.append([_("6000"),"#327663"])
	liststore.append([_("6001"),"#266D3B"])
	liststore.append([_("6002"),"#276230"])
	liststore.append([_("6003"),"#4E553D"])
	liststore.append([_("6004"),"#004547"])
	liststore.append([_("6005"),"#0E4438"])
	liststore.append([_("6006"),"#3B3D33"])
	liststore.append([_("6007"),"#2B3626"])
	liststore.append([_("6008"),"#302F22"])
	liststore.append([_("6009"),"#213529"])
	liststore.append([_("6010"),"#426E38"])
	liststore.append([_("6011"),"#68825F"])
	liststore.append([_("6012"),"#293A37"])
	liststore.append([_("6013"),"#76785B"])
	liststore.append([_("6014"),"#443F31"])
	liststore.append([_("6015"),"#383B34"])
	liststore.append([_("6016"),"#00664F"])
	liststore.append([_("6017"),"#4D8542"])
	liststore.append([_("6018"),"#4B9B3E"])
	liststore.append([_("6019"),"#B2D8B4"])
	liststore.append([_("6020"),"#394937"])
	liststore.append([_("6021"),"#87A180"])
	liststore.append([_("6022"),"#3C372A"])
	liststore.append([_("6024"),"#008455"])
	liststore.append([_("6025"),"#56723D"])
	liststore.append([_("6026"),"#005C54"])
	liststore.append([_("6027"),"#77BBBD"])
	liststore.append([_("6028"),"#2E554B"])
	liststore.append([_("6029"),"#006F43"])
	liststore.append([_("6032"),"#00855A"])
	liststore.append([_("6033"),"#3F8884"])
	liststore.append([_("6034"),"#75ADB1"])
	liststore.append([_("7000"),"#798790"])
	liststore.append([_("7001"),"#8C969F"])
	liststore.append([_("7002"),"#827D67"])
	liststore.append([_("7003"),"#79796C"])
	liststore.append([_("7004"),"#999A9F"])
	liststore.append([_("7005"),"#6D7270"])
	liststore.append([_("7006"),"#766A5D"])
	liststore.append([_("7008"),"#756444"])
	liststore.append([_("7009"),"#585E55"])
	liststore.append([_("7010"),"#565957"])
	liststore.append([_("7011"),"#525A60"])
	liststore.append([_("7012"),"#575E62"])
	liststore.append([_("7013"),"#585346"])
	liststore.append([_("7015"),"#4C5057"])
	liststore.append([_("7016"),"#363D43"])
	liststore.append([_("7021"),"#2E3236"])
	liststore.append([_("7022"),"#464644"])
	liststore.append([_("7023"),"#7F8279"])
	liststore.append([_("7024"),"#484B52"])
	liststore.append([_("7026"),"#354044"])
	liststore.append([_("7030"),"#919089"])
	liststore.append([_("7031"),"#5B686F"])
	liststore.append([_("7032"),"#B5B5A7"])
	liststore.append([_("7033"),"#7A8376"])
	liststore.append([_("7034"),"#928D75"])
	liststore.append([_("7035"),"#C4CACA"])
	liststore.append([_("7036"),"#949294"])
	liststore.append([_("7037"),"#7E8082"])
	liststore.append([_("7038"),"#B0B3AF"])
	liststore.append([_("7039"),"#6D6B64"])
	liststore.append([_("7040"),"#9AA0A7"])
	liststore.append([_("7042"),"#929899"])
	liststore.append([_("7043"),"#505455"])
	liststore.append([_("8000"),"#8B7045"])
	liststore.append([_("8001"),"#9C6935"])
	liststore.append([_("8002"),"#774C3B"])
	liststore.append([_("8003"),"#815333"])
	liststore.append([_("8004"),"#904E3B"])
	liststore.append([_("8007"),"#6B442A"])
	liststore.append([_("8008"),"#735230"])
	liststore.append([_("8011"),"#5B3927"])
	liststore.append([_("8012"),"#64312A"])
	liststore.append([_("8014"),"#49372A"])
	liststore.append([_("8015"),"#5A2E2A"])
	liststore.append([_("8016"),"#4F3128"])
	liststore.append([_("8017"),"#45302B"])
	liststore.append([_("8019"),"#3B3332"])
	liststore.append([_("8022"),"#1E1A1A"])
	liststore.append([_("8023"),"#A45C32"])
	liststore.append([_("8024"),"#7B5741"])
	liststore.append([_("8025"),"#765D4D"])
	liststore.append([_("8028"),"#4F3B2B"])
	liststore.append([_("9001"),"#EEE9DA"])
	liststore.append([_("9002"),"#DADBD5"])
	liststore.append([_("9003"),"#F8F9FB"])
	liststore.append([_("9004"),"#252427"])
	liststore.append([_("9005"),"#151619"])
	liststore.append([_("9010"),"#F4F4ED"])
	liststore.append([_("9011"),"#1F2126"])
	liststore.append([_("9016"),"#F3F6F6"])
	liststore.append([_("9017"),"#1B191D"])
	liststore.append([_("9018"),"#CBD2D0"])
	return liststore
		
def hexadecimal_colors():
	liststore = Gtk.ListStore(str, str)
	liststore.append([_("AliceBlue"),"#F0F8FF"])
	liststore.append([_("AntiqueWhite"),"#FAEBD7"])
	liststore.append([_("Aqua"),"#00FFFF"])
	liststore.append([_("Aquamarine"),"#7FFFD4"])
	liststore.append([_("Azure"),"#F0FFFF"])
	liststore.append([_("Beige"),"#F5F5DC"])
	liststore.append([_("Bisque"),"#FFE4C4"])
	liststore.append([_("Black"),"#000000"])
	liststore.append([_("BlanchedAlmond"),"#FFEBCD"])
	liststore.append([_("Blue"),"#0000FF"])
	liststore.append([_("BlueViolet"),"#8A2BE2"])
	liststore.append([_("Brown"),"#A52A2A"])
	liststore.append([_("BurlyWood"),"#DEB887"])
	liststore.append([_("CadetBlue"),"#5F9EA0"])
	liststore.append([_("Chartreuse"),"#7FFF00"])
	liststore.append([_("Chocolate"),"#D2691E"])
	liststore.append([_("Coral"),"#FF7F50"])
	liststore.append([_("CornflowerBlue"),"#6495ED"])
	liststore.append([_("Cornsilk"),"#FFF8DC"])
	liststore.append([_("Crimson"),"#DC143C"])
	liststore.append([_("Cyan"),"#00FFFF"])
	liststore.append([_("DarkBlue"),"#00008B"])
	liststore.append([_("DarkCyan"),"#008B8B"])
	liststore.append([_("DarkGoldenRod"),"#B8860B"])
	liststore.append([_("DarkGray"),"#A9A9A9"])
	liststore.append([_("DarkGrey"),"#A9A9A9"])
	liststore.append([_("DarkGreen"),"#006400"])
	liststore.append([_("DarkKhaki"),"#BDB76B"])
	liststore.append([_("DarkMagenta"),"#8B008B"])
	liststore.append([_("DarkOliveGreen"),"#556B2F"])
	liststore.append([_("Darkorange"),"#FF8C00"])
	liststore.append([_("DarkOrchid"),"#9932CC"])
	liststore.append([_("DarkRed"),"#8B0000"])
	liststore.append([_("DarkSalmon"),"#E9967A"])
	liststore.append([_("DarkSeaGreen"),"#8FBC8F"])
	liststore.append([_("DarkSlateBlue"),"#483D8B"])
	liststore.append([_("DarkSlateGray"),"#2F4F4F"])
	liststore.append([_("DarkSlateGrey"),"#2F4F4F"])
	liststore.append([_("DarkTurquoise"),"#00CED1"])
	liststore.append([_("DarkViolet"),"#9400D3"])
	liststore.append([_("DeepPink"),"#FF1493"])
	liststore.append([_("DeepSkyBlue"),"#00BFFF"])
	liststore.append([_("DimGray"),"#696969"])
	liststore.append([_("DimGrey"),"#696969"])
	liststore.append([_("DodgerBlue"),"#1E90FF"])
	liststore.append([_("FireBrick"),"#B22222"])
	liststore.append([_("FloralWhite"),"#FFFAF0"])
	liststore.append([_("ForestGreen"),"#228B22"])
	liststore.append([_("Fuchsia"),"#FF00FF"])
	liststore.append([_("Gainsboro"),"#DCDCDC"])
	liststore.append([_("GhostWhite"),"#F8F8FF"])
	liststore.append([_("Gold"),"#FFD700"])
	liststore.append([_("GoldenRod"),"#DAA520"])
	liststore.append([_("Gray"),"#808080"])
	liststore.append([_("Grey"),"#808080"])
	liststore.append([_("Green"),"#008000"])
	liststore.append([_("GreenYellow"),"#ADFF2F"])
	liststore.append([_("HoneyDew"),"#F0FFF0"])
	liststore.append([_("HotPink"),"#FF69B4"])
	liststore.append([_("IndianRed "),"#CD5C5C"])
	liststore.append([_("Indigo "),"#4B0082"])
	liststore.append([_("Ivory"),"#FFFFF0"])
	liststore.append([_("Khaki"),"#F0E68C"])
	liststore.append([_("Lavender"),"#E6E6FA"])
	liststore.append([_("LavenderBlush"),"#FFF0F5"])
	liststore.append([_("LawnGreen"),"#7CFC00"])
	liststore.append([_("LemonChiffon"),"#FFFACD"])
	liststore.append([_("LightBlue"),"#ADD8E6"])
	liststore.append([_("LightCoral"),"#F08080"])
	liststore.append([_("LightCyan"),"#E0FFFF"])
	liststore.append([_("LightGoldenRodYellow"),"#FAFAD2"])
	liststore.append([_("LightGray"),"#D3D3D3"])
	liststore.append([_("LightGrey"),"#D3D3D3"])
	liststore.append([_("LightGreen"),"#90EE90"])
	liststore.append([_("LightPink"),"#FFB6C1"])
	liststore.append([_("LightSalmon"),"#FFA07A"])
	liststore.append([_("LightSeaGreen"),"#20B2AA"])
	liststore.append([_("LightSkyBlue"),"#87CEFA"])
	liststore.append([_("LightSlateGray"),"#778899"])
	liststore.append([_("LightSlateGrey"),"#778899"])
	liststore.append([_("LightSteelBlue"),"#B0C4DE"])
	liststore.append([_("LightYellow"),"#FFFFE0"])
	liststore.append([_("Lime"),"#00FF00"])
	liststore.append([_("LimeGreen"),"#32CD32"])
	liststore.append([_("Linen"),"#FAF0E6"])
	liststore.append([_("Magenta"),"#FF00FF"])
	liststore.append([_("Maroon"),"#800000"])
	liststore.append([_("MediumAquaMarine"),"#66CDAA"])
	liststore.append([_("MediumBlue"),"#0000CD"])
	liststore.append([_("MediumOrchid"),"#BA55D3"])
	liststore.append([_("MediumPurple"),"#9370DB"])
	liststore.append([_("MediumSeaGreen"),"#3CB371"])
	liststore.append([_("MediumSlateBlue"),"#7B68EE"])
	liststore.append([_("MediumSpringGreen"),"#00FA9A"])
	liststore.append([_("MediumTurquoise"),"#48D1CC"])
	liststore.append([_("MediumVioletRed"),"#C71585"])
	liststore.append([_("MidnightBlue"),"#191970"])
	liststore.append([_("MintCream"),"#F5FFFA"])
	liststore.append([_("MistyRose"),"#FFE4E1"])
	liststore.append([_("Moccasin"),"#FFE4B5"])
	liststore.append([_("NavajoWhite"),"#FFDEAD"])
	liststore.append([_("Navy"),"#000080"])
	liststore.append([_("OldLace"),"#FDF5E6"])
	liststore.append([_("Olive"),"#808000"])
	liststore.append([_("OliveDrab"),"#6B8E23"])
	liststore.append([_("Orange"),"#FFA500"])
	liststore.append([_("OrangeRed"),"#FF4500"])
	liststore.append([_("Orchid"),"#DA70D6"])
	liststore.append([_("PaleGoldenRod"),"#EEE8AA"])
	liststore.append([_("PaleGreen"),"#98FB98"])
	liststore.append([_("PaleTurquoise"),"#AFEEEE"])
	liststore.append([_("PaleVioletRed"),"#DB7093"])
	liststore.append([_("PapayaWhip"),"#FFEFD5"])
	liststore.append([_("PeachPuff"),"#FFDAB9"])
	liststore.append([_("Peru"),"#CD853F"])
	liststore.append([_("Pink"),"#FFC0CB"])
	liststore.append([_("Plum"),"#DDA0DD"])
	liststore.append([_("PowderBlue"),"#B0E0E6"])
	liststore.append([_("Purple"),"#800080"])
	liststore.append([_("Red"),"#FF0000"])
	liststore.append([_("RosyBrown"),"#BC8F8F"])
	liststore.append([_("RoyalBlue"),"#4169E1"])
	liststore.append([_("SaddleBrown"),"#8B4513"])
	liststore.append([_("Salmon"),"#FA8072"])
	liststore.append([_("SandyBrown"),"#F4A460"])
	liststore.append([_("SeaGreen"),"#2E8B57"])
	liststore.append([_("SeaShell"),"#FFF5EE"])
	liststore.append([_("Sienna"),"#A0522D"])
	liststore.append([_("Silver"),"#C0C0C0"])
	liststore.append([_("SkyBlue"),"#87CEEB"])
	liststore.append([_("SlateBlue"),"#6A5ACD"])
	liststore.append([_("SlateGray"),"#708090"])
	liststore.append([_("SlateGrey"),"#708090"])
	liststore.append([_("Snow"),"#FFFAFA"])
	liststore.append([_("SpringGreen"),"#00FF7F"])
	liststore.append([_("SteelBlue"),"#4682B4"])
	liststore.append([_("Tan"),"#D2B48C"])
	liststore.append([_("Teal"),"#008080"])
	liststore.append([_("Thistle"),"#D8BFD8"])
	liststore.append([_("Tomato"),"#FF6347"])
	liststore.append([_("Turquoise"),"#40E0D0"])
	liststore.append([_("Violet"),"#EE82EE"])
	liststore.append([_("Wheat"),"#F5DEB3"])
	liststore.append([_("White"),"#FFFFFF"])
	liststore.append([_("WhiteSmoke"),"#F5F5F5"])
	liststore.append([_("Yellow"),"#FFFF00"])
	liststore.append([_("YellowGreen"),"#9ACD32"])
	return liststore
		
if __name__ == "__main__":
	cg = Dropper()
	Gtk.main()
	exit(0)
